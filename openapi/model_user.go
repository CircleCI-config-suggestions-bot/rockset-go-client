/*
 * REST API
 *
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// User struct for User
type User struct {
	// ISO-8601 date
	CreatedAt *string `json:"created_at,omitempty"`
	// user email
	Email string `json:"email"`
	// user first name
	FirstName *string `json:"first_name,omitempty"`
	// user last name
	LastName *string `json:"last_name,omitempty"`
	// List of roles for a given user
	Roles *[]string `json:"roles,omitempty"`
	// state of user - NEW / ACTIVE
	State *string `json:"state,omitempty"`
	Org *string `json:"org,omitempty"`
	InviteState *string `json:"invite_state,omitempty"`
	Orgs *[]Organization `json:"orgs,omitempty"`
	OrgMemberships *[]OrgMembership `json:"org_memberships,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(email string) *User {
	this := User{}
	this.Email = email
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *User) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *User) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *User) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetEmail returns the Email field value
func (o *User) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *User) SetEmail(v string) {
	o.Email = v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *User) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *User) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *User) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *User) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *User) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *User) SetLastName(v string) {
	o.LastName = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *User) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *User) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *User) SetRoles(v []string) {
	o.Roles = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *User) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *User) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *User) SetState(v string) {
	o.State = &v
}

// GetOrg returns the Org field value if set, zero value otherwise.
func (o *User) GetOrg() string {
	if o == nil || o.Org == nil {
		var ret string
		return ret
	}
	return *o.Org
}

// GetOrgOk returns a tuple with the Org field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetOrgOk() (*string, bool) {
	if o == nil || o.Org == nil {
		return nil, false
	}
	return o.Org, true
}

// HasOrg returns a boolean if a field has been set.
func (o *User) HasOrg() bool {
	if o != nil && o.Org != nil {
		return true
	}

	return false
}

// SetOrg gets a reference to the given string and assigns it to the Org field.
func (o *User) SetOrg(v string) {
	o.Org = &v
}

// GetInviteState returns the InviteState field value if set, zero value otherwise.
func (o *User) GetInviteState() string {
	if o == nil || o.InviteState == nil {
		var ret string
		return ret
	}
	return *o.InviteState
}

// GetInviteStateOk returns a tuple with the InviteState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetInviteStateOk() (*string, bool) {
	if o == nil || o.InviteState == nil {
		return nil, false
	}
	return o.InviteState, true
}

// HasInviteState returns a boolean if a field has been set.
func (o *User) HasInviteState() bool {
	if o != nil && o.InviteState != nil {
		return true
	}

	return false
}

// SetInviteState gets a reference to the given string and assigns it to the InviteState field.
func (o *User) SetInviteState(v string) {
	o.InviteState = &v
}

// GetOrgs returns the Orgs field value if set, zero value otherwise.
func (o *User) GetOrgs() []Organization {
	if o == nil || o.Orgs == nil {
		var ret []Organization
		return ret
	}
	return *o.Orgs
}

// GetOrgsOk returns a tuple with the Orgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetOrgsOk() (*[]Organization, bool) {
	if o == nil || o.Orgs == nil {
		return nil, false
	}
	return o.Orgs, true
}

// HasOrgs returns a boolean if a field has been set.
func (o *User) HasOrgs() bool {
	if o != nil && o.Orgs != nil {
		return true
	}

	return false
}

// SetOrgs gets a reference to the given []Organization and assigns it to the Orgs field.
func (o *User) SetOrgs(v []Organization) {
	o.Orgs = &v
}

// GetOrgMemberships returns the OrgMemberships field value if set, zero value otherwise.
func (o *User) GetOrgMemberships() []OrgMembership {
	if o == nil || o.OrgMemberships == nil {
		var ret []OrgMembership
		return ret
	}
	return *o.OrgMemberships
}

// GetOrgMembershipsOk returns a tuple with the OrgMemberships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetOrgMembershipsOk() (*[]OrgMembership, bool) {
	if o == nil || o.OrgMemberships == nil {
		return nil, false
	}
	return o.OrgMemberships, true
}

// HasOrgMemberships returns a boolean if a field has been set.
func (o *User) HasOrgMemberships() bool {
	if o != nil && o.OrgMemberships != nil {
		return true
	}

	return false
}

// SetOrgMemberships gets a reference to the given []OrgMembership and assigns it to the OrgMemberships field.
func (o *User) SetOrgMemberships(v []OrgMembership) {
	o.OrgMemberships = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.FirstName != nil {
		toSerialize["first_name"] = o.FirstName
	}
	if o.LastName != nil {
		toSerialize["last_name"] = o.LastName
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Org != nil {
		toSerialize["org"] = o.Org
	}
	if o.InviteState != nil {
		toSerialize["invite_state"] = o.InviteState
	}
	if o.Orgs != nil {
		toSerialize["orgs"] = o.Orgs
	}
	if o.OrgMemberships != nil {
		toSerialize["org_memberships"] = o.OrgMemberships
	}
	return json.Marshal(toSerialize)
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


