openapi: 3.0.1
info:
  description: |-
    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.

    All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example:
    ```
    Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT
    ```

    All endpoints are only accessible via https.

    Build something awesome!
  title: REST API
  version: v1
servers:
- url: https://api.rs2.usw2.rockset.com/
tags:
- name: API Keys
- name: Aliases
- name: Collections
- name: Documents
- name: IP Allowlist
- name: Integrations
- name: Organizations
- name: Queries
- name: Query Lambdas
- name: Users
- name: Virtual Instances
- name: Workspaces
paths:
  /v1/orgs/self:
    get:
      description: Retrieve information about current organization.
      operationId: getOrganization
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
          description: organization retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Get Organization
      tags:
      - Organizations
  /v1/orgs/self/aliases:
    get:
      description: Retrieve all aliases in an organization
      operationId: listAliases
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAliasesResponse'
          description: aliases retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Aliases
      tags:
      - Aliases
  /v1/orgs/self/collections:
    get:
      description: Retrieve all collections in an organization.
      operationId: listCollections
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollectionsResponse'
          description: collections retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Collections
      tags:
      - Collections
  /v1/orgs/self/integrations:
    get:
      description: List all integrations in an organization.
      operationId: listIntegrations
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIntegrationsResponse'
          description: integrations retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Integrations
      tags:
      - Integrations
    post:
      description: Create a new integration.
      operationId: createIntegration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIntegrationRequest'
        description: integration credentials
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIntegrationResponse'
          description: integration created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create Integration
      tags:
      - Integrations
      x-codegen-request-body-name: body
  /v1/orgs/self/integrations/{integration}:
    delete:
      description: Remove an integration.
      operationId: deleteIntegration
      parameters:
      - description: name of the integration
        in: path
        name: integration
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteIntegrationResponse'
          description: integration deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete Integration
      tags:
      - Integrations
    get:
      description: Get information about a single integration.
      operationId: getIntegration
      parameters:
      - description: name of the integration
        in: path
        name: integration
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationResponse'
          description: integration retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Get Integration
      tags:
      - Integrations
  /v1/orgs/self/ip/allowlist:
    get:
      operationId: listAllowlistIps
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIpAllowlistsResponse'
          description: IP Allowlists retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List IP Allowlist Entries
      tags:
      - IP Allowlist
    post:
      description: Create a new entry to allow an IP address
      operationId: createAllowlistIp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIpAllowlistRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIpAllowlistResponse'
          description: IP Allowlist network policy created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create IP Allowlist Network Policy
      tags:
      - IP Allowlist
      x-codegen-request-body-name: body
  /v1/orgs/self/ip/allowlist/{name}:
    delete:
      description: Delete an entry for IP allowlist network policy.
      operationId: deleteAllowlistIp
      parameters:
      - description: name of the IP allowlist network policy
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteIpAllowlistResponse'
          description: IP Allowlist network policy deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete IP Allowlist Network Policy
      tags:
      - IP Allowlist
    get:
      description: Get details about a IP Allowlist network policy
      operationId: getAllowlistIp
      parameters:
      - description: name of the IP Allowlist network policy
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIpAllowlistResponse'
          description: IP Allowlist network policy retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Get IP Allowlist Network Policy
      tags:
      - IP Allowlist
  /v1/orgs/self/lambdas:
    get:
      description: List all Query Lambdas in an organization.
      operationId: listAllQueryLambdas
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueryLambdasResponse'
          description: Query Lambdas listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Query Lambdas
      tags:
      - Query Lambdas
  /v1/orgs/self/lambdas/tags:
    get:
      description: List all distinct Query Lambda tags in an organization.
      operationId: listOrganizationTags
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueryLambdaTagsResponse'
          description: tags listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List All Query Lambda Tags
      tags:
      - Query Lambdas
  /v1/orgs/self/lambdas/tags/{tag}:
    get:
      description: List all Query Lambda versions associated with a given tag.
      operationId: listQueryLambdaTagVersions
      parameters:
      - description: name of the tag
        in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueryLambdaVersionsResponse'
          description: versions listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Query Lambda Tag Versions
      tags:
      - Query Lambdas
  /v1/orgs/self/queries:
    post:
      description: Make a SQL query to Rockset.
      operationId: query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
          description: query executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Query
      tags:
      - Queries
      x-codegen-request-body-name: body
  /v1/orgs/self/queries/validations:
    post:
      description: Validate a SQL query with Rockset's parser and planner.
      operationId: validate
      parameters:
      - in: query
        name: parameters
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateQueryResponse'
          description: query validated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Validate Query
      tags:
      - Queries
      x-codegen-request-body-name: body
  /v1/orgs/self/users:
    get:
      description: Retrieve all users for an organization.
      operationId: listUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
          description: users retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Users
      tags:
      - Users
    post:
      description: Create a new user for an organization.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
          description: user created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create User
      tags:
      - Users
      x-codegen-request-body-name: body
  /v1/orgs/self/users/self:
    get:
      description: Retrieve currently authenticated user.
      operationId: getCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: user retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Get Current User
      tags:
      - Users
  /v1/orgs/self/users/self/apikeys:
    get:
      description: List all API keys for the authenticated user.
      operationId: listApiKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiKeysResponse'
          description: API keys retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List API Keys
      tags:
      - API Keys
    post:
      description: Create a new API key for the authenticated user.
      operationId: createApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
          description: API key created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create API Key
      tags:
      - API Keys
      x-codegen-request-body-name: body
  /v1/orgs/self/users/self/apikeys/{name}:
    delete:
      description: Delete an API key for the authenticated user.
      operationId: deleteApiKey
      parameters:
      - description: name of the API key
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteApiKeyResponse'
          description: API key deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete API Key
      tags:
      - API Keys
  /v1/orgs/self/users/{user}:
    delete:
      description: Delete a user from an organization.
      operationId: deleteUser
      parameters:
      - description: user email
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserResponse'
          description: user deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete User
      tags:
      - Users
  /v1/orgs/self/users/{user}/apikeys:
    get:
      description: List all API keys for any user in your organization. Accessible
        to Admin users only.
      operationId: listApiKeysAdmin
      parameters:
      - description: user email
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiKeysResponse'
          description: API keys retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List API Keys (any user)
      tags:
      - API Keys
    post:
      description: Create a new API key for any user in your organization. Accessible
        to Admin users only.
      operationId: createApiKeyAdmin
      parameters:
      - description: user email
        in: path
        name: user
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
          description: API key created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create API Key (any user)
      tags:
      - API Keys
      x-codegen-request-body-name: body
  /v1/orgs/self/users/{user}/apikeys/{name}:
    delete:
      description: Delete an API key for any user in your organization. Accessible
        to Admin users only.
      operationId: deleteApiKeyAdmin
      parameters:
      - description: name of the API key
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: user email
        in: path
        name: user
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteApiKeyResponse'
          description: API key deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete API Key (any user)
      tags:
      - API Keys
  /v1/orgs/self/virtualinstances:
    get:
      description: Retrieve all virtual instances in an organization.
      operationId: listVirtualInstances
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVirtualInstancesResponse'
          description: virtual instances retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Virtual Instances
      tags:
      - Virtual Instances
  /v1/orgs/self/virtualinstances/{virtualInstanceId}:
    get:
      description: Get details about a virtual instance.
      operationId: getVirtualInstance
      parameters:
      - description: uuid of the virtual instance
        in: path
        name: virtualInstanceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVirtualInstanceResponse'
          description: virtual instance retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Get Virtual Instance
      tags:
      - Virtual Instances
    post:
      description: Update the properties of a virtual instance.
      operationId: setVirtualInstance
      parameters:
      - description: uuid of the virtual instance
        in: path
        name: virtualInstanceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVirtualInstanceRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualInstanceResponse'
          description: virtual instance updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Update Virtual Instance
      tags:
      - Virtual Instances
      x-codegen-request-body-name: body
  /v1/orgs/self/ws:
    get:
      description: List all workspaces in an organization.
      operationId: listWorkspaces
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkspacesResponse'
          description: workspaces retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Workspaces
      tags:
      - Workspaces
    post:
      description: Create a new workspace.
      operationId: createWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequest'
        description: workspace details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWorkspaceResponse'
          description: workspace created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create Workspace
      tags:
      - Workspaces
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}:
    delete:
      description: Remove a workspace.
      operationId: deleteWorkspace
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteWorkspaceResponse'
          description: workspace deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete Workspace
      tags:
      - Workspaces
    get:
      description: Get information about a single workspace.
      operationId: getWorkspace
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkspaceResponse'
          description: workspace retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Get Workspace
      tags:
      - Workspaces
  /v1/orgs/self/ws/{workspace}/aliases:
    get:
      description: Retrieve all aliases in a workspace.
      operationId: workspaceAliases
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAliasesResponse'
          description: aliases retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Aliases for Workspace
      tags:
      - Aliases
    post:
      description: Create new alias in a workspace.
      operationId: createAlias
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAliasRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAliasResponse'
          description: alias created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create Alias
      tags:
      - Aliases
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/aliases/{alias}:
    delete:
      description: Delete an alias.
      operationId: deleteAlias
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the alias
        in: path
        name: alias
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAliasResponse'
          description: alias deleted successfully
      summary: Delete Alias
      tags:
      - Aliases
    get:
      description: Get details about a alias
      operationId: getAlias
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the alias
        in: path
        name: alias
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAliasResponse'
          description: alias retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Get Alias
      tags:
      - Aliases
    post:
      description: Update alias in a workspace.
      operationId: updateAlias
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the alias
        in: path
        name: alias
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAliasRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAliasResponse'
          description: alias updated successfully
      summary: Update Alias
      tags:
      - Aliases
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/aliases/{alias}/lambdas:
    get:
      description: Get all Query Lambdas that hit a specific Rockset Alias.
      operationId: listQueryLambdasWithAlias
      parameters:
      - in: path
        name: workspace
        required: true
        schema:
          type: string
      - in: path
        name: alias
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueryLambdasResponse'
          description: Query Lambdas fetched successfully
      summary: Get Query Lambdas with Alias
      tags:
      - Aliases
  /v1/orgs/self/ws/{workspace}/collections:
    get:
      description: Retrieve all collections in a workspace.
      operationId: workspaceCollections
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCollectionsResponse'
          description: collections retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Collections for Workspace
      tags:
      - Collections
    post:
      description: Create new collection in a workspace.
      operationId: createCollection
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollectionRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCollectionResponse'
          description: collection created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create Collection
      tags:
      - Collections
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/collections/{collection}:
    delete:
      description: Delete a collection and all its documents from Rockset.
      operationId: deleteCollection
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the collection
        in: path
        name: collection
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCollectionResponse'
          description: collection deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete Collection
      tags:
      - Collections
    get:
      description: Get details about a collection.
      operationId: getCollection
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the collection
        in: path
        name: collection
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCollectionResponse'
          description: collection retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Get Collection
      tags:
      - Collections
  /v1/orgs/self/ws/{workspace}/collections/{collection}/aliases:
    get:
      description: Get all Aliases for a specific Rockset Collection.
      operationId: listAliasesForCollection
      parameters:
      - in: path
        name: workspace
        required: true
        schema:
          type: string
      - in: path
        name: collection
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAliasesResponse'
          description: Aliases fetched successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Get Aliases for Collection
      tags:
      - Collections
  /v1/orgs/self/ws/{workspace}/collections/{collection}/docs:
    delete:
      description: Delete documents from a collection.
      operationId: deleteDocuments
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the collection
        in: path
        name: collection
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDocumentsRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDocumentsResponse'
          description: documents deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete Documents
      tags:
      - Documents
      x-codegen-request-body-name: body
    patch:
      description: Update existing documents in a collection.
      operationId: patchDocuments
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the collection
        in: path
        name: collection
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchDocumentsRequest'
        description: JSON Patch objects
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchDocumentsResponse'
          description: Documents patched successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Patch Documents
      tags:
      - Documents
      x-codegen-request-body-name: body
    post:
      description: Add documents to a collection.
      operationId: addDocuments
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the collection
        in: path
        name: collection
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDocumentsRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDocumentsResponse'
          description: documents added successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Add Documents
      tags:
      - Documents
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/collections/{collection}/lambdas:
    get:
      description: Get all Query Lambdas that hit a specific Rockset Collection.
      operationId: listQueryLambdasInCollection
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the collection
        in: path
        name: collection
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueryLambdaVersionsResponse'
          description: Query Lambdas fetched successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Get Query Lambdas for Collection
      tags:
      - Collections
  /v1/orgs/self/ws/{workspace}/lambdas:
    get:
      description: List all Query Lambdas under given workspace.
      operationId: listQueryLambdasInWorkspace
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueryLambdasResponse'
          description: Query Lambdas listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Query Lambdas in Workspace
      tags:
      - Query Lambdas
    post:
      description: Create a Query Lambda in given workspace.
      operationId: createQueryLambda
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQueryLambdaRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryLambdaVersionResponse'
          description: Query Lambda created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create Query Lambda
      tags:
      - Query Lambdas
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}:
    delete:
      description: Delete a Query Lambda.
      operationId: deleteQueryLambda
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteQueryLambdaResponse'
          description: Query Lambda deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete Query Lambda
      tags:
      - Query Lambdas
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags:
    get:
      description: List all tags associated with a Query Lambda
      operationId: listQueryLambdaTags
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueryLambdaTagsResponse'
          description: tags listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Query Lambda Tags
      tags:
      - Query Lambdas
    post:
      description: Create a tag for a specific Query Lambda version, or update that
        tag if it already exists.
      operationId: createQueryLambdaTag
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQueryLambdaTagRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryLambdaTagResponse'
          description: tag created successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Create Query Lambda Tag
      tags:
      - Query Lambdas
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}:
    delete:
      description: Delete a tag for a specific Query Lambda
      operationId: deleteQueryLambdaTag
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      - description: name of the tag
        in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryLambdaTagResponse'
          description: tag deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete Query Lambda Tag Version
      tags:
      - Query Lambdas
    get:
      description: Get the Query Lambda version associated with a given tag.
      operationId: getQueryLambdaTagVersion
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      - description: name of the tag
        in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryLambdaTagResponse'
          description: version retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Get Query Lambda Tag
      tags:
      - Query Lambdas
    post:
      description: Execute the Query Lambda version associated with a given tag.
      operationId: executeQueryLambdaByTag
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      - description: tag
        in: path
        name: tag
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteQueryLambdaRequest'
        description: JSON object
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
          description: Query Lambda executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Execute Query Lambda By Tag
      tags:
      - Query Lambdas
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/version/{version}:
    delete:
      description: Delete a Query Lambda version.
      operationId: deleteQueryLambdaVersion
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      - description: version
        in: path
        name: version
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryLambdaVersionResponse'
          description: Query Lambda version deleted successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Delete Query Lambda Version
      tags:
      - Query Lambdas
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions:
    get:
      description: List all versions of a Query Lambda.
      operationId: listQueryLambdaVersions
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueryLambdaVersionsResponse'
          description: versions listed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Query Lambda Versions
      tags:
      - Query Lambdas
    post:
      description: Create a new version of a Query Lambda in given workspace.
      operationId: updateQueryLambda
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      - in: query
        name: create
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQueryLambdaRequest'
        description: JSON object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryLambdaVersionResponse'
          description: Query Lambda updated successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Update Query Lambda
      tags:
      - Query Lambdas
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions/{version}:
    get:
      description: Get details for a specified version of a Query Lambda.
      operationId: getQueryLambdaVersion
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      - description: version
        in: path
        name: version
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryLambdaVersionResponse'
          description: Query Lambda retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Get Query Lambda Version
      tags:
      - Query Lambdas
    post:
      description: Execute a particular version of a Query Lambda.
      operationId: executeQueryLambda
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      - description: name of the Query Lambda
        in: path
        name: queryLambda
        required: true
        schema:
          type: string
      - description: version
        in: path
        name: version
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteQueryLambdaRequest'
        description: JSON object
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
          description: Query Lambda executed successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: Execute Query Lambda
      tags:
      - Query Lambdas
      x-codegen-request-body-name: body
  /v1/orgs/self/ws/{workspace}/ws:
    get:
      description: List workspaces under given workspace.
      operationId: childWorkspaces
      parameters:
      - description: name of the workspace
        in: path
        name: workspace
        required: true
        schema:
          default: commons
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkspacesResponse'
          description: workspaces retrieved successfully
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not found
        "405":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not allowed
        "406":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not acceptable
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: request timeout
        "415":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not supported
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: resource exceeded
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: internal error
        "501":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not implemented
        "502":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: bad gateway
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: not ready
      summary: List Workspaces in Workspace
      tags:
      - Workspaces
components:
  schemas:
    AddDocumentsRequest:
      example:
        data:
        - '{}'
        - '{}'
      properties:
        data:
          description: Array of JSON documents
          items:
            properties: {}
            type: object
          type: array
      required:
      - data
      type: object
    AddDocumentsResponse:
      example:
        data:
        - patch_id: 486gsg8
          _collection: customers
          _id: 2cd61e3b
          error:
            trace_id: trace_id
            error_id: error_id
            line: 0
            column: 6
            message: collection not found
            type: InvalidInput
          status: ADDED
        - patch_id: 486gsg8
          _collection: customers
          _id: 2cd61e3b
          error:
            trace_id: trace_id
            error_id: error_id
            line: 0
            column: 6
            message: collection not found
            type: InvalidInput
          status: ADDED
      properties:
        data:
          description: information about the added documents
          items:
            $ref: '#/components/schemas/DocumentStatus'
          type: array
      type: object
    Alias:
      example:
        workspace: commons
        collections: '[common.foo, prod.demo]'
        creator_email: xyz@rockset.com
        name: demo
        description: alias referencing collection in workspace
        created_at: 2001-08-28T00:23:41Z
        state: CREATED
        modified_at: 2001-08-28T00:23:42Z
      properties:
        name:
          description: name of the alias
          example: demo
          type: string
        description:
          description: alias description
          example: alias referencing collection in workspace
          type: string
        workspace:
          description: name of the workspace
          example: commons
          type: string
        creator_email:
          description: email of the creator
          example: xyz@rockset.com
          type: string
        collections:
          description: list of fully qualified collection names referenced by alias
          example: '[common.foo, prod.demo]'
          items:
            type: string
          type: array
        state:
          description: state of the alias
          enum:
          - CREATED
          - DELETED
          example: CREATED
          type: string
        created_at:
          description: ISO-8601 date
          example: 2001-08-28T00:23:41Z
          type: string
        modified_at:
          description: ISO-8601 date
          example: 2001-08-28T00:23:42Z
          type: string
      type: object
    ApiKey:
      description: API keys are used to authenticate requests to Rockset's API. An
        API key is tied to the user who creates it. A new API key can be created for
        each use case, with a maximum of 10 API keys per user.
      example:
        name: my-event-logger-key
        created_at: 2001-08-28T00:23:41Z
        created_by: created_by
        key: aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT
        last_access_time: 2001-08-28T00:23:41Z
      properties:
        created_at:
          description: ISO-8601 date
          example: 2001-08-28T00:23:41Z
          type: string
        name:
          description: descriptive label
          example: my-event-logger-key
          type: string
        key:
          description: string of 64 alphanumeric characters
          example: aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT
          type: string
        last_access_time:
          description: ISO-8601 date
          example: 2001-08-28T00:23:41Z
          type: string
        created_by:
          type: string
      required:
      - key
      - name
      type: object
    AwsAccessKey:
      example:
        aws_access_key_id: AKIAIOSFODNN7EXAMPLE
        aws_secret_access_key: wJal....
      properties:
        aws_access_key_id:
          description: AWS access key ID
          example: AKIAIOSFODNN7EXAMPLE
          type: string
        aws_secret_access_key:
          description: AWS secret access key
          example: wJal....
          type: string
      required:
      - aws_access_key_id
      - aws_secret_access_key
      type: object
    AwsRole:
      example:
        aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
      properties:
        aws_role_arn:
          description: ARN of rockset-role created in your account
          example: arn:aws:iam::2378964092:role/rockset-role
          type: string
      required:
      - aws_role_arn
      type: object
    Cluster:
      example:
        aws_region: us-west-2
        top_level_domain: .com
        domain: rockset
        apiserver_url: api.rockset.us-west-2.rockset.com
        id: asdf98-as9df8adf-adsf9asfd
        cluster_type: PRIVATE
      properties:
        id:
          description: unique identifier for the cluster
          example: asdf98-as9df8adf-adsf9asfd
          type: string
        cluster_type:
          description: cluster type
          enum:
          - PUBLIC
          - PRIVATE
          example: PRIVATE
          type: string
        aws_region:
          description: aws region
          example: us-west-2
          type: string
        domain:
          description: domain of org using cluster
          example: rockset
          type: string
        top_level_domain:
          description: top level domain of org using cluster
          example: .com
          type: string
        apiserver_url:
          description: api server url for cluster
          example: api.rockset.us-west-2.rockset.com
          type: string
      type: object
    Collection:
      example:
        workspace: commons
        aliases:
        - workspace: commons
          collections: '[common.foo, prod.demo]'
          creator_email: xyz@rockset.com
          name: demo
          description: alias referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
        - workspace: commons
          collections: '[common.foo, prod.demo]'
          creator_email: xyz@rockset.com
          name: demo
          description: alias referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
        sources:
        - integration_name: aws-integration
          s3:
            bucket: s3://customer-account-info
            prefixes: '[''/transactions'', ''/stores'']'
            mappings:
            - input_path:
              - input_path
              - input_path
              mask:
                args: '{}'
                name: name
            - input_path:
              - input_path
              - input_path
              mask:
                args: '{}'
                name: name
            secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
            prefix: prefix/to/keys
            access_key: AKIAIOSFODNN7EXAMPLE
            pattern: prefix/to/**/keys/*.format
            format: none
            region: us-west-2
          redshift:
            schema: common
            incremental_field: updated_at
            database: dev
            table_name: redshift_table_name
          gcs:
            bucket: server-logs
            prefix: prefix/to/keys
          kafka:
            kafka_topic_name: example-topic
            status:
              num_documents_processed: 1337
              last_consumed_time: 2001-08-28T00:23:41Z
              state: ACTIVE
          format_params:
            xml:
              attribute_prefix: _attr
              doc_tag: row
              encoding: UTF-8
              value_tag: value
              root_tag: root
            csv:
              quoteChar: '"'
              escapeChar: \
              columnNames: '[c1, c2, c3]'
              columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
              firstLineAsColumnNames: true
              encoding: UTF-8
              separator: ','
            json: true
          file_upload:
            file_name: file1.json
            file_size: 12345
            file_upload_time: 2019-01-15T21:48:23Z
          kinesis:
            stream_name: click_stream
            aws_region: us-east-2
          mongodb:
            database_name: my_database
            collection_name: my_collection
            status:
              scan_total_records: 2000
              stream_records_deleted: 100
              stream_records_inserted: 10000
              stream_records_updated: 1000
              scan_start_time: 2001-08-28T00:23:41Z
              stream_last_update_processed_at: 2019-01-15T21:48:23Z
              stream_last_delete_processed_at: 2019-01-15T21:48:23Z
              scan_end_time: 2001-08-28T00:23:41Z
              stream_last_insert_processed_at: 2019-01-15T21:48:23Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          dynamodb:
            aws_region: us-east-2
            rcu: 1000
            table_name: dynamodb_table_name
            status:
              scan_total_records: 2000
              stream_last_processed_at: 2019-01-15T21:48:23Z
              scan_start_time: 2001-08-28T00:23:41Z
              scan_end_time: 2001-08-28T00:23:41Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          status:
            last_processed_item: /path/to/some/object
            last_error_at: 2019-01-15T21:48:23Z
            total_error_items: 32849023
            last_processed_at: 2019-01-15T21:48:23Z
            last_error_item: /path/to/some/object
            total_processed_items: 32849023
            state: INITIALIZING
            message: error 403 forbidden
            last_error_reason: invalid format .docx
            since: 2019-01-15T21:48:23Z
        - integration_name: aws-integration
          s3:
            bucket: s3://customer-account-info
            prefixes: '[''/transactions'', ''/stores'']'
            mappings:
            - input_path:
              - input_path
              - input_path
              mask:
                args: '{}'
                name: name
            - input_path:
              - input_path
              - input_path
              mask:
                args: '{}'
                name: name
            secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
            prefix: prefix/to/keys
            access_key: AKIAIOSFODNN7EXAMPLE
            pattern: prefix/to/**/keys/*.format
            format: none
            region: us-west-2
          redshift:
            schema: common
            incremental_field: updated_at
            database: dev
            table_name: redshift_table_name
          gcs:
            bucket: server-logs
            prefix: prefix/to/keys
          kafka:
            kafka_topic_name: example-topic
            status:
              num_documents_processed: 1337
              last_consumed_time: 2001-08-28T00:23:41Z
              state: ACTIVE
          format_params:
            xml:
              attribute_prefix: _attr
              doc_tag: row
              encoding: UTF-8
              value_tag: value
              root_tag: root
            csv:
              quoteChar: '"'
              escapeChar: \
              columnNames: '[c1, c2, c3]'
              columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
              firstLineAsColumnNames: true
              encoding: UTF-8
              separator: ','
            json: true
          file_upload:
            file_name: file1.json
            file_size: 12345
            file_upload_time: 2019-01-15T21:48:23Z
          kinesis:
            stream_name: click_stream
            aws_region: us-east-2
          mongodb:
            database_name: my_database
            collection_name: my_collection
            status:
              scan_total_records: 2000
              stream_records_deleted: 100
              stream_records_inserted: 10000
              stream_records_updated: 1000
              scan_start_time: 2001-08-28T00:23:41Z
              stream_last_update_processed_at: 2019-01-15T21:48:23Z
              stream_last_delete_processed_at: 2019-01-15T21:48:23Z
              scan_end_time: 2001-08-28T00:23:41Z
              stream_last_insert_processed_at: 2019-01-15T21:48:23Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          dynamodb:
            aws_region: us-east-2
            rcu: 1000
            table_name: dynamodb_table_name
            status:
              scan_total_records: 2000
              stream_last_processed_at: 2019-01-15T21:48:23Z
              scan_start_time: 2001-08-28T00:23:41Z
              scan_end_time: 2001-08-28T00:23:41Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          status:
            last_processed_item: /path/to/some/object
            last_error_at: 2019-01-15T21:48:23Z
            total_error_items: 32849023
            last_processed_at: 2019-01-15T21:48:23Z
            last_error_item: /path/to/some/object
            total_processed_items: 32849023
            state: INITIALIZING
            message: error 403 forbidden
            last_error_reason: invalid format .docx
            since: 2019-01-15T21:48:23Z
        created_at: 2001-08-28T00:23:41Z
        description: transactions from stores worldwide
        clustering_key:
        - keys: Values of a record to partition on. This is not needed if the partition
            type is AUTO
          type: AUTO
          field_name: address.city.zipcode
        - keys: Values of a record to partition on. This is not needed if the partition
            type is AUTO
          type: AUTO
          field_name: address.city.zipcode
        created_by: hello@rockset.com
        field_mappings:
        - output_field:
            on_error: '[''SKIP'', ''FAIL'']'
            value:
              sql: SHA256()
            field_name: zip_hash
          name: myTestMapping
          input_fields:
          - is_drop: true
            if_missing: '[''SKIP'', ''PASS'']'
            param: zip
            field_name: address.city.zipcode
          - is_drop: true
            if_missing: '[''SKIP'', ''PASS'']'
            param: zip
            field_name: address.city.zipcode
          is_drop_all_fields: true
        - output_field:
            on_error: '[''SKIP'', ''FAIL'']'
            value:
              sql: SHA256()
            field_name: zip_hash
          name: myTestMapping
          input_fields:
          - is_drop: true
            if_missing: '[''SKIP'', ''PASS'']'
            param: zip
            field_name: address.city.zipcode
          - is_drop: true
            if_missing: '[''SKIP'', ''PASS'']'
            param: zip
            field_name: address.city.zipcode
          is_drop_all_fields: true
        stats:
          doc_count: 2145
          inverted_index_size: 123456
          last_updated_ms: 1535101094433
          total_size: 123456
          purged_doc_count: 2145
          range_index_size: 123456
          purged_doc_size: 123456
          fill_progress: 0.6
          bytes_overwritten: 123456
          bytes_inserted: 123456
          total_index_size: 123456
          column_index_size: 123456
          last_queried_ms: 1535101119334
          row_index_size: 123456
        field_schemas:
        - field_options:
            range_index_mode: v1_index
            index_mode: index
            type_index_mode: index
            column_index_mode: store
          field_name: address.city.zipcode
        - field_options:
            range_index_mode: v1_index
            index_mode: index
            type_index_mode: index
            column_index_mode: store
          field_name: address.city.zipcode
        retention_secs: 2592000
        name: global-transactions
        inverted_index_group_encoding_options:
          group_size: 0
          restart_length: 6
          doc_id_codec: doc_id_codec
          event_time_codec: event_time_codec
        fieldPartitions:
        - keys: Values of a record to partition on. This is not needed if the partition
            type is AUTO
          type: AUTO
          field_name: address.city.zipcode
        - keys: Values of a record to partition on. This is not needed if the partition
            type is AUTO
          type: AUTO
          field_name: address.city.zipcode
        status: READY
      properties:
        created_at:
          description: ISO-8601 date
          example: 2001-08-28T00:23:41Z
          type: string
        created_by:
          description: email of user who created the collection
          example: hello@rockset.com
          type: string
        name:
          description: unique identifer for collection, can contain alphanumeric or
            dash characters
          example: global-transactions
          pattern: ^[A-Za-z0-9_\-.]+$
          type: string
        description:
          description: text describing the collection
          example: transactions from stores worldwide
          type: string
        workspace:
          description: name of the workspace that the collection is in
          example: commons
          type: string
        status:
          description: 'current status of collection, one of: CREATED, READY, DELETED'
          enum:
          - INITIALIZED
          - CREATED
          - READY
          - PAUSED
          - DELETED
          - PAUSING
          - RESUMING
          - PREPARING_BULK
          - BULK_INGEST_MODE
          - EXITING_BULK_INGEST_MODE
          - UNKNOWN
          example: READY
          type: string
        sources:
          description: list of sources from which collection ingests
          items:
            $ref: '#/components/schemas/Source'
          type: array
        stats:
          $ref: '#/components/schemas/CollectionStats'
        retention_secs:
          description: number of seconds after which data is purged based on event
            time
          example: 2592000
          format: int64
          type: integer
        field_mappings:
          description: list of mappings applied on all documents in a collection
          items:
            $ref: '#/components/schemas/FieldMappingV2'
          type: array
        clustering_key:
          description: list of clustering fields for a collection
          items:
            $ref: '#/components/schemas/FieldPartition'
          type: array
        aliases:
          description: list of aliases for a collection
          items:
            $ref: '#/components/schemas/Alias'
          type: array
        field_schemas:
          description: 'list of field schemas '
          items:
            $ref: '#/components/schemas/FieldSchema'
          type: array
        inverted_index_group_encoding_options:
          $ref: '#/components/schemas/InvertedIndexGroupEncodingOptions'
        fieldPartitions:
          items:
            $ref: '#/components/schemas/FieldPartition'
          type: array
      type: object
    CollectionStats:
      example:
        doc_count: 2145
        inverted_index_size: 123456
        last_updated_ms: 1535101094433
        total_size: 123456
        purged_doc_count: 2145
        range_index_size: 123456
        purged_doc_size: 123456
        fill_progress: 0.6
        bytes_overwritten: 123456
        bytes_inserted: 123456
        total_index_size: 123456
        column_index_size: 123456
        last_queried_ms: 1535101119334
        row_index_size: 123456
      properties:
        doc_count:
          description: number of documents in the collection
          example: 2145
          format: int64
          type: integer
        purged_doc_count:
          description: number of documents purged from the collection
          example: 2145
          format: int64
          type: integer
        fill_progress:
          description: number between 0 and 1 that indicates progress of collection
            creation
          example: 0.6
          format: double
          type: number
        last_queried_ms:
          description: milliseconds since Unix epoch Jan 1, 1970
          example: 1535101119334
          format: int64
          type: integer
        last_updated_ms:
          description: milliseconds since Unix epoch Jan 1, 1970
          example: 1535101094433
          format: int64
          type: integer
        total_size:
          description: total collection size in bytes
          example: 123456
          format: int64
          type: integer
        total_index_size:
          description: total collection index size in bytes
          example: 123456
          format: int64
          type: integer
        row_index_size:
          description: total collection row index size in bytes
          example: 123456
          format: int64
          type: integer
        column_index_size:
          description: total collection column index size in bytes
          example: 123456
          format: int64
          type: integer
        inverted_index_size:
          description: total collection inverted index size in bytes
          example: 123456
          format: int64
          type: integer
        range_index_size:
          description: total collection range index size in bytes
          example: 123456
          format: int64
          type: integer
        purged_doc_size:
          description: total size of bytes purged in bytes
          example: 123456
          format: int64
          type: integer
        bytes_inserted:
          description: total number of bytes inserted into the collection
          example: 123456
          format: int64
          type: integer
        bytes_overwritten:
          description: total number of bytes overwritten in writing into the collection
          example: 123456
          format: int64
          type: integer
      type: object
    CreateAliasRequest:
      example:
        collections: '[common.foo, prod.demo]'
        name: aliasName
        description: version alias
      properties:
        name:
          description: Alias name
          example: aliasName
          type: string
        description:
          description: optional description
          example: version alias
          type: string
        collections:
          description: list of fully qualified collection names referenced by alias
          example: '[common.foo, prod.demo]'
          items:
            type: string
          type: array
      required:
      - collections
      - name
      type: object
    CreateAliasResponse:
      example:
        data:
          workspace: commons
          collections: '[common.foo, prod.demo]'
          creator_email: xyz@rockset.com
          name: demo
          description: alias referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
      properties:
        data:
          $ref: '#/components/schemas/Alias'
      type: object
    CreateApiKeyRequest:
      example:
        name: event-logger
      properties:
        name:
          description: descriptive label
          example: event-logger
          type: string
      required:
      - name
      type: object
    CreateApiKeyResponse:
      example:
        data:
          name: my-event-logger-key
          created_at: 2001-08-28T00:23:41Z
          created_by: created_by
          key: aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT
          last_access_time: 2001-08-28T00:23:41Z
      properties:
        data:
          $ref: '#/components/schemas/ApiKey'
      type: object
    CreateCollectionRequest:
      example:
        field_mappings:
        - output_field:
            on_error: '[''SKIP'', ''FAIL'']'
            value:
              sql: SHA256()
            field_name: zip_hash
          name: myTestMapping
          input_fields:
          - is_drop: true
            if_missing: '[''SKIP'', ''PASS'']'
            param: zip
            field_name: address.city.zipcode
          - is_drop: true
            if_missing: '[''SKIP'', ''PASS'']'
            param: zip
            field_name: address.city.zipcode
          is_drop_all_fields: true
        - output_field:
            on_error: '[''SKIP'', ''FAIL'']'
            value:
              sql: SHA256()
            field_name: zip_hash
          name: myTestMapping
          input_fields:
          - is_drop: true
            if_missing: '[''SKIP'', ''PASS'']'
            param: zip
            field_name: address.city.zipcode
          - is_drop: true
            if_missing: '[''SKIP'', ''PASS'']'
            param: zip
            field_name: address.city.zipcode
          is_drop_all_fields: true
        sources:
        - integration_name: aws-integration
          s3:
            bucket: s3://customer-account-info
            prefixes: '[''/transactions'', ''/stores'']'
            mappings:
            - input_path:
              - input_path
              - input_path
              mask:
                args: '{}'
                name: name
            - input_path:
              - input_path
              - input_path
              mask:
                args: '{}'
                name: name
            secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
            prefix: prefix/to/keys
            access_key: AKIAIOSFODNN7EXAMPLE
            pattern: prefix/to/**/keys/*.format
            format: none
            region: us-west-2
          redshift:
            schema: common
            incremental_field: updated_at
            database: dev
            table_name: redshift_table_name
          gcs:
            bucket: server-logs
            prefix: prefix/to/keys
          kafka:
            kafka_topic_name: example-topic
            status:
              num_documents_processed: 1337
              last_consumed_time: 2001-08-28T00:23:41Z
              state: ACTIVE
          format_params:
            xml:
              attribute_prefix: _attr
              doc_tag: row
              encoding: UTF-8
              value_tag: value
              root_tag: root
            csv:
              quoteChar: '"'
              escapeChar: \
              columnNames: '[c1, c2, c3]'
              columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
              firstLineAsColumnNames: true
              encoding: UTF-8
              separator: ','
            json: true
          file_upload:
            file_name: file1.json
            file_size: 12345
            file_upload_time: 2019-01-15T21:48:23Z
          kinesis:
            stream_name: click_stream
            aws_region: us-east-2
          mongodb:
            database_name: my_database
            collection_name: my_collection
            status:
              scan_total_records: 2000
              stream_records_deleted: 100
              stream_records_inserted: 10000
              stream_records_updated: 1000
              scan_start_time: 2001-08-28T00:23:41Z
              stream_last_update_processed_at: 2019-01-15T21:48:23Z
              stream_last_delete_processed_at: 2019-01-15T21:48:23Z
              scan_end_time: 2001-08-28T00:23:41Z
              stream_last_insert_processed_at: 2019-01-15T21:48:23Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          dynamodb:
            aws_region: us-east-2
            rcu: 1000
            table_name: dynamodb_table_name
            status:
              scan_total_records: 2000
              stream_last_processed_at: 2019-01-15T21:48:23Z
              scan_start_time: 2001-08-28T00:23:41Z
              scan_end_time: 2001-08-28T00:23:41Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          status:
            last_processed_item: /path/to/some/object
            last_error_at: 2019-01-15T21:48:23Z
            total_error_items: 32849023
            last_processed_at: 2019-01-15T21:48:23Z
            last_error_item: /path/to/some/object
            total_processed_items: 32849023
            state: INITIALIZING
            message: error 403 forbidden
            last_error_reason: invalid format .docx
            since: 2019-01-15T21:48:23Z
        - integration_name: aws-integration
          s3:
            bucket: s3://customer-account-info
            prefixes: '[''/transactions'', ''/stores'']'
            mappings:
            - input_path:
              - input_path
              - input_path
              mask:
                args: '{}'
                name: name
            - input_path:
              - input_path
              - input_path
              mask:
                args: '{}'
                name: name
            secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
            prefix: prefix/to/keys
            access_key: AKIAIOSFODNN7EXAMPLE
            pattern: prefix/to/**/keys/*.format
            format: none
            region: us-west-2
          redshift:
            schema: common
            incremental_field: updated_at
            database: dev
            table_name: redshift_table_name
          gcs:
            bucket: server-logs
            prefix: prefix/to/keys
          kafka:
            kafka_topic_name: example-topic
            status:
              num_documents_processed: 1337
              last_consumed_time: 2001-08-28T00:23:41Z
              state: ACTIVE
          format_params:
            xml:
              attribute_prefix: _attr
              doc_tag: row
              encoding: UTF-8
              value_tag: value
              root_tag: root
            csv:
              quoteChar: '"'
              escapeChar: \
              columnNames: '[c1, c2, c3]'
              columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
              firstLineAsColumnNames: true
              encoding: UTF-8
              separator: ','
            json: true
          file_upload:
            file_name: file1.json
            file_size: 12345
            file_upload_time: 2019-01-15T21:48:23Z
          kinesis:
            stream_name: click_stream
            aws_region: us-east-2
          mongodb:
            database_name: my_database
            collection_name: my_collection
            status:
              scan_total_records: 2000
              stream_records_deleted: 100
              stream_records_inserted: 10000
              stream_records_updated: 1000
              scan_start_time: 2001-08-28T00:23:41Z
              stream_last_update_processed_at: 2019-01-15T21:48:23Z
              stream_last_delete_processed_at: 2019-01-15T21:48:23Z
              scan_end_time: 2001-08-28T00:23:41Z
              stream_last_insert_processed_at: 2019-01-15T21:48:23Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          dynamodb:
            aws_region: us-east-2
            rcu: 1000
            table_name: dynamodb_table_name
            status:
              scan_total_records: 2000
              stream_last_processed_at: 2019-01-15T21:48:23Z
              scan_start_time: 2001-08-28T00:23:41Z
              scan_end_time: 2001-08-28T00:23:41Z
              scan_records_processed: 1000
              state: SCANNING_TABLE
          status:
            last_processed_item: /path/to/some/object
            last_error_at: 2019-01-15T21:48:23Z
            total_error_items: 32849023
            last_processed_at: 2019-01-15T21:48:23Z
            last_error_item: /path/to/some/object
            total_processed_items: 32849023
            state: INITIALIZING
            message: error 403 forbidden
            last_error_reason: invalid format .docx
            since: 2019-01-15T21:48:23Z
        event_time_info:
          field: timestamp
          format: seconds_since_epoch
          time_zone: UTC
        field_schemas:
        - field_options:
            range_index_mode: v1_index
            index_mode: index
            type_index_mode: index
            column_index_mode: store
          field_name: address.city.zipcode
        - field_options:
            range_index_mode: v1_index
            index_mode: index
            type_index_mode: index
            column_index_mode: store
          field_name: address.city.zipcode
        retention_secs: 1000000
        name: global-transactions
        description: transactions from stores worldwide
        clustering_key:
        - keys: Values of a record to partition on. This is not needed if the partition
            type is AUTO
          type: AUTO
          field_name: address.city.zipcode
        - keys: Values of a record to partition on. This is not needed if the partition
            type is AUTO
          type: AUTO
          field_name: address.city.zipcode
        inverted_index_group_encoding_options:
          group_size: 0
          restart_length: 6
          doc_id_codec: doc_id_codec
          event_time_codec: event_time_codec
      properties:
        name:
          description: unique identifier for collection, can contain alphanumeric
            or dash characters
          example: global-transactions
          type: string
        description:
          description: text describing the collection
          example: transactions from stores worldwide
          type: string
        sources:
          description: list of sources from which to ingest data
          items:
            $ref: '#/components/schemas/Source'
          type: array
        retention_secs:
          description: number of seconds after which data is purged, based on event
            time
          example: 1000000
          format: int64
          type: integer
        event_time_info:
          $ref: '#/components/schemas/EventTimeInfo'
        field_mappings:
          description: list of mappings
          items:
            $ref: '#/components/schemas/FieldMappingV2'
          type: array
        clustering_key:
          description: list of clustering fields
          items:
            $ref: '#/components/schemas/FieldPartition'
          type: array
        field_schemas:
          description: list of field schemas
          items:
            $ref: '#/components/schemas/FieldSchema'
          type: array
        inverted_index_group_encoding_options:
          $ref: '#/components/schemas/InvertedIndexGroupEncodingOptions'
      required:
      - name
      type: object
    CreateCollectionResponse:
      example:
        data:
          workspace: commons
          aliases:
          - workspace: commons
            collections: '[common.foo, prod.demo]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          - workspace: commons
            collections: '[common.foo, prod.demo]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          sources:
          - integration_name: aws-integration
            s3:
              bucket: s3://customer-account-info
              prefixes: '[''/transactions'', ''/stores'']'
              mappings:
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              prefix: prefix/to/keys
              access_key: AKIAIOSFODNN7EXAMPLE
              pattern: prefix/to/**/keys/*.format
              format: none
              region: us-west-2
            redshift:
              schema: common
              incremental_field: updated_at
              database: dev
              table_name: redshift_table_name
            gcs:
              bucket: server-logs
              prefix: prefix/to/keys
            kafka:
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '[c1, c2, c3]'
                columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              json: true
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              stream_name: click_stream
              aws_region: us-east-2
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_error_at: 2019-01-15T21:48:23Z
              total_error_items: 32849023
              last_processed_at: 2019-01-15T21:48:23Z
              last_error_item: /path/to/some/object
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
              last_error_reason: invalid format .docx
              since: 2019-01-15T21:48:23Z
          - integration_name: aws-integration
            s3:
              bucket: s3://customer-account-info
              prefixes: '[''/transactions'', ''/stores'']'
              mappings:
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              prefix: prefix/to/keys
              access_key: AKIAIOSFODNN7EXAMPLE
              pattern: prefix/to/**/keys/*.format
              format: none
              region: us-west-2
            redshift:
              schema: common
              incremental_field: updated_at
              database: dev
              table_name: redshift_table_name
            gcs:
              bucket: server-logs
              prefix: prefix/to/keys
            kafka:
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '[c1, c2, c3]'
                columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              json: true
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              stream_name: click_stream
              aws_region: us-east-2
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_error_at: 2019-01-15T21:48:23Z
              total_error_items: 32849023
              last_processed_at: 2019-01-15T21:48:23Z
              last_error_item: /path/to/some/object
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
              last_error_reason: invalid format .docx
              since: 2019-01-15T21:48:23Z
          created_at: 2001-08-28T00:23:41Z
          description: transactions from stores worldwide
          clustering_key:
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          created_by: hello@rockset.com
          field_mappings:
          - output_field:
              on_error: '[''SKIP'', ''FAIL'']'
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          - output_field:
              on_error: '[''SKIP'', ''FAIL'']'
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          stats:
            doc_count: 2145
            inverted_index_size: 123456
            last_updated_ms: 1535101094433
            total_size: 123456
            purged_doc_count: 2145
            range_index_size: 123456
            purged_doc_size: 123456
            fill_progress: 0.6
            bytes_overwritten: 123456
            bytes_inserted: 123456
            total_index_size: 123456
            column_index_size: 123456
            last_queried_ms: 1535101119334
            row_index_size: 123456
          field_schemas:
          - field_options:
              range_index_mode: v1_index
              index_mode: index
              type_index_mode: index
              column_index_mode: store
            field_name: address.city.zipcode
          - field_options:
              range_index_mode: v1_index
              index_mode: index
              type_index_mode: index
              column_index_mode: store
            field_name: address.city.zipcode
          retention_secs: 2592000
          name: global-transactions
          inverted_index_group_encoding_options:
            group_size: 0
            restart_length: 6
            doc_id_codec: doc_id_codec
            event_time_codec: event_time_codec
          fieldPartitions:
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          status: READY
      properties:
        data:
          $ref: '#/components/schemas/Collection'
      type: object
    CreateIntegrationRequest:
      example:
        s3:
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
        redshift:
          password: pswd....
          port: 5439
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          host: test.yuyugt.us-west-2.redshift.amazonaws.com
          s3_bucket_path: s3://redshift-unload
          username: awsuser
        gcs:
          gcp_service_account:
            service_account_key_file_json: service_account_key_file_json
        segment:
          connection_string: connection_string
        kafka:
          source_status_by_topic: topic-a:DORMANT
          kafka_topic_names:
          - kafka_topic_names
          - kafka_topic_names
          kafka_data_format: json
          connection_string: connection_string
        name: event-logs
        description: AWS account with event data for the data science team.
        kinesis:
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
        mongodb:
          connection_uri: mongodb+srv://<username>:<password>@server.example.com/
        dynamodb:
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
      properties:
        name:
          description: descriptive label
          example: event-logs
          type: string
        description:
          description: longer explanation for the integration
          example: AWS account with event data for the data science team.
          type: string
        s3:
          $ref: '#/components/schemas/S3Integration'
        kinesis:
          $ref: '#/components/schemas/KinesisIntegration'
        dynamodb:
          $ref: '#/components/schemas/DynamodbIntegration'
        redshift:
          $ref: '#/components/schemas/RedshiftIntegration'
        gcs:
          $ref: '#/components/schemas/GcsIntegration'
        segment:
          $ref: '#/components/schemas/SegmentIntegration'
        kafka:
          $ref: '#/components/schemas/KafkaIntegration'
        mongodb:
          $ref: '#/components/schemas/MongoDbIntegration'
      required:
      - name
      type: object
    CreateIntegrationResponse:
      example:
        data:
          s3:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          description: AWS account with event data for the data science team.
          created_at: 2001-08-28T00:23:41Z
          created_by: hello@rockset.com
          kinesis:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          dynamodb:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          redshift:
            password: pswd....
            port: 5439
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            host: test.yuyugt.us-west-2.redshift.amazonaws.com
            s3_bucket_path: s3://redshift-unload
            username: awsuser
          collections:
          - workspace: commons
            aliases:
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
            field_schemas:
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            retention_secs: 2592000
            name: global-transactions
            inverted_index_group_encoding_options:
              group_size: 0
              restart_length: 6
              doc_id_codec: doc_id_codec
              event_time_codec: event_time_codec
            fieldPartitions:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            status: READY
          - workspace: commons
            aliases:
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
            field_schemas:
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            retention_secs: 2592000
            name: global-transactions
            inverted_index_group_encoding_options:
              group_size: 0
              restart_length: 6
              doc_id_codec: doc_id_codec
              event_time_codec: event_time_codec
            fieldPartitions:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            status: READY
          gcs:
            gcp_service_account:
              service_account_key_file_json: service_account_key_file_json
          segment:
            connection_string: connection_string
          kafka:
            source_status_by_topic: topic-a:DORMANT
            kafka_topic_names:
            - kafka_topic_names
            - kafka_topic_names
            kafka_data_format: json
            connection_string: connection_string
          name: event-logs
          mongodb:
            connection_uri: mongodb+srv://<username>:<password>@server.example.com/
      properties:
        data:
          $ref: '#/components/schemas/Integration'
      type: object
    CreateIpAllowlistRequest:
      example:
        name: Office
        description: Office IP address
        ip_address: 82.217.192.0/18
      properties:
        name:
          description: IP Allowlist policy name
          example: Office
          type: string
        description:
          description: optional description
          example: Office IP address
          type: string
        ip_address:
          description: individual IP address or range of IP addresses in CIDR notation
          example: 82.217.192.0/18
          type: string
      required:
      - ip_address
      - name
      type: object
    CreateIpAllowlistResponse:
      example:
        data:
          creator_email: xyz@rockset.com
          name: Office
          description: Office IP address
          created_at: 2001-08-28T00:23:41Z
          ip_address: 82.217.192.0/18
      properties:
        data:
          $ref: '#/components/schemas/IpAllowlist'
      type: object
    CreateQueryLambdaRequest:
      example:
        name: myQueryLambda
        description: production version foo
        sql:
          default_parameters:
          - name: _id
            type: string
            value: 85beb391
          - name: _id
            type: string
            value: 85beb391
          query: SELECT 'Foo'
      properties:
        name:
          description: Query Lambda name
          example: myQueryLambda
          type: string
        description:
          description: optional description
          example: production version foo
          type: string
        sql:
          $ref: '#/components/schemas/QueryLambdaSql'
      required:
      - name
      - sql
      type: object
    CreateQueryLambdaTagRequest:
      example:
        tag_name: production
        version: 123ABC
      properties:
        tag_name:
          description: name of Query Lambda tag
          example: production
          type: string
        version:
          description: hash identifying a Query Lambda tag
          example: 123ABC
          type: string
      required:
      - tag_name
      - version
      type: object
    CreateUserRequest:
      example:
        roles: '["admin", "member", "read-only"]'
        email: hello@rockset.com
      properties:
        email:
          description: user email, must be unique
          example: hello@rockset.com
          type: string
        roles:
          description: List of roles for a given user
          example: '["admin", "member", "read-only"]'
          items:
            type: string
          type: array
      required:
      - email
      - roles
      type: object
    CreateUserResponse:
      example:
        data:
          org: org
          roles: '["admin", "member", "read-only"]'
          created_at: 2001-08-28T00:23:41Z
          last_name: Doe
          invite_state: PENDING
          state: ACTIVE
          orgs:
          - deletionScheduledAt: deletionScheduledAt
            company_name: Rockset, Inc
            created_at: 2001-08-28T00:23:41Z
            external_id: <hash>
            id: rockset
            rockset_user: rockset_user
            state: TRIAL
            display_name: Rockset, Inc
            clusters:
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
          - deletionScheduledAt: deletionScheduledAt
            company_name: Rockset, Inc
            created_at: 2001-08-28T00:23:41Z
            external_id: <hash>
            id: rockset
            rockset_user: rockset_user
            state: TRIAL
            display_name: Rockset, Inc
            clusters:
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
          org_memberships:
          - expires_at: 2001-08-29T00:23:41Z
            organization:
              deletionScheduledAt: deletionScheduledAt
              company_name: Rockset, Inc
              created_at: 2001-08-28T00:23:41Z
              external_id: <hash>
              id: rockset
              rockset_user: rockset_user
              state: TRIAL
              display_name: Rockset, Inc
              clusters:
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
            roles:
            - roles
            - roles
            invite_state: PENDING
            created_at: 2001-08-28T00:23:41Z
            invited_by: invited_by
            email: email
          - expires_at: 2001-08-29T00:23:41Z
            organization:
              deletionScheduledAt: deletionScheduledAt
              company_name: Rockset, Inc
              created_at: 2001-08-28T00:23:41Z
              external_id: <hash>
              id: rockset
              rockset_user: rockset_user
              state: TRIAL
              display_name: Rockset, Inc
              clusters:
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
            roles:
            - roles
            - roles
            invite_state: PENDING
            created_at: 2001-08-28T00:23:41Z
            invited_by: invited_by
            email: email
          first_name: John
          email: hello@rockset.com
      properties:
        data:
          $ref: '#/components/schemas/User'
      type: object
    CreateWorkspaceRequest:
      example:
        name: event_logs
        description: Datasets of system logs for the ops team.
      properties:
        name:
          description: descriptive label and unique identifier
          example: event_logs
          type: string
        description:
          description: longer explanation for the workspace
          example: Datasets of system logs for the ops team.
          type: string
      required:
      - name
      type: object
    CreateWorkspaceResponse:
      example:
        data:
          name: event_logs
          created_at: 2001-08-28T00:23:41Z
          description: Datasets of system logs for the ops team.
          collection_count: 3
          created_by: hello@rockset.com
      properties:
        data:
          $ref: '#/components/schemas/Workspace'
      type: object
    CsvParams:
      example:
        quoteChar: '"'
        escapeChar: \
        columnNames: '[c1, c2, c3]'
        columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
        firstLineAsColumnNames: true
        encoding: UTF-8
        separator: ','
      properties:
        firstLineAsColumnNames:
          description: If the first line in every object specifies the column names
          example: true
          type: boolean
        separator:
          description: a single character that is the column separator
          example: ','
          type: string
        encoding:
          description: 'can be one of: UTF-8, ISO_8859_1, UTF-16'
          example: UTF-8
          type: string
        columnNames:
          description: names of columns
          example: '[c1, c2, c3]'
          items:
            type: string
          type: array
        columnTypes:
          description: names of columns
          example: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
          items:
            enum:
            - UNKNOWN
            - BOOLEAN
            - BOOL
            - INTEGER
            - INT
            - FLOAT
            - TIME
            - DATE
            - DATETIME
            - TIMESTAMP
            - STRING
            type: string
          type: array
        quoteChar:
          description: character within which a cell value is enclosed,null character
            if no such character, default is '"'
          example: '"'
          type: string
        escapeChar:
          description: escape character removes any special meaning from the following
            character,default is '\'
          example: \
          type: string
      type: object
    DeleteAliasResponse:
      example:
        data:
          workspace: commons
          collections: '[common.foo, prod.demo]'
          creator_email: xyz@rockset.com
          name: demo
          description: alias referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
      properties:
        data:
          $ref: '#/components/schemas/Alias'
      type: object
    DeleteApiKeyResponse:
      example:
        data:
          name: my-event-logger-key
          created_at: 2001-08-28T00:23:41Z
          created_by: created_by
          key: aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT
          last_access_time: 2001-08-28T00:23:41Z
      properties:
        data:
          $ref: '#/components/schemas/ApiKey'
      type: object
    DeleteCollectionResponse:
      example:
        data:
          workspace: commons
          aliases:
          - workspace: commons
            collections: '[common.foo, prod.demo]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          - workspace: commons
            collections: '[common.foo, prod.demo]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          sources:
          - integration_name: aws-integration
            s3:
              bucket: s3://customer-account-info
              prefixes: '[''/transactions'', ''/stores'']'
              mappings:
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              prefix: prefix/to/keys
              access_key: AKIAIOSFODNN7EXAMPLE
              pattern: prefix/to/**/keys/*.format
              format: none
              region: us-west-2
            redshift:
              schema: common
              incremental_field: updated_at
              database: dev
              table_name: redshift_table_name
            gcs:
              bucket: server-logs
              prefix: prefix/to/keys
            kafka:
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '[c1, c2, c3]'
                columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              json: true
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              stream_name: click_stream
              aws_region: us-east-2
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_error_at: 2019-01-15T21:48:23Z
              total_error_items: 32849023
              last_processed_at: 2019-01-15T21:48:23Z
              last_error_item: /path/to/some/object
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
              last_error_reason: invalid format .docx
              since: 2019-01-15T21:48:23Z
          - integration_name: aws-integration
            s3:
              bucket: s3://customer-account-info
              prefixes: '[''/transactions'', ''/stores'']'
              mappings:
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              prefix: prefix/to/keys
              access_key: AKIAIOSFODNN7EXAMPLE
              pattern: prefix/to/**/keys/*.format
              format: none
              region: us-west-2
            redshift:
              schema: common
              incremental_field: updated_at
              database: dev
              table_name: redshift_table_name
            gcs:
              bucket: server-logs
              prefix: prefix/to/keys
            kafka:
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '[c1, c2, c3]'
                columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              json: true
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              stream_name: click_stream
              aws_region: us-east-2
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_error_at: 2019-01-15T21:48:23Z
              total_error_items: 32849023
              last_processed_at: 2019-01-15T21:48:23Z
              last_error_item: /path/to/some/object
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
              last_error_reason: invalid format .docx
              since: 2019-01-15T21:48:23Z
          created_at: 2001-08-28T00:23:41Z
          description: transactions from stores worldwide
          clustering_key:
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          created_by: hello@rockset.com
          field_mappings:
          - output_field:
              on_error: '[''SKIP'', ''FAIL'']'
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          - output_field:
              on_error: '[''SKIP'', ''FAIL'']'
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          stats:
            doc_count: 2145
            inverted_index_size: 123456
            last_updated_ms: 1535101094433
            total_size: 123456
            purged_doc_count: 2145
            range_index_size: 123456
            purged_doc_size: 123456
            fill_progress: 0.6
            bytes_overwritten: 123456
            bytes_inserted: 123456
            total_index_size: 123456
            column_index_size: 123456
            last_queried_ms: 1535101119334
            row_index_size: 123456
          field_schemas:
          - field_options:
              range_index_mode: v1_index
              index_mode: index
              type_index_mode: index
              column_index_mode: store
            field_name: address.city.zipcode
          - field_options:
              range_index_mode: v1_index
              index_mode: index
              type_index_mode: index
              column_index_mode: store
            field_name: address.city.zipcode
          retention_secs: 2592000
          name: global-transactions
          inverted_index_group_encoding_options:
            group_size: 0
            restart_length: 6
            doc_id_codec: doc_id_codec
            event_time_codec: event_time_codec
          fieldPartitions:
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          status: READY
      properties:
        data:
          $ref: '#/components/schemas/Collection'
      type: object
    DeleteDocumentsRequest:
      example:
        data:
        - _id: 2cd61e3b
        - _id: 2cd61e3b
      properties:
        data:
          description: array of document IDs
          items:
            $ref: '#/components/schemas/DeleteDocumentsRequestData'
          type: array
      required:
      - data
      type: object
    DeleteDocumentsRequestData:
      example:
        _id: 2cd61e3b
      properties:
        _id:
          description: unique document ID
          example: 2cd61e3b
          type: string
      required:
      - _id
      type: object
    DeleteDocumentsResponse:
      example:
        data:
        - patch_id: 486gsg8
          _collection: customers
          _id: 2cd61e3b
          error:
            trace_id: trace_id
            error_id: error_id
            line: 0
            column: 6
            message: collection not found
            type: InvalidInput
          status: ADDED
        - patch_id: 486gsg8
          _collection: customers
          _id: 2cd61e3b
          error:
            trace_id: trace_id
            error_id: error_id
            line: 0
            column: 6
            message: collection not found
            type: InvalidInput
          status: ADDED
      properties:
        data:
          description: information about deleted documents
          items:
            $ref: '#/components/schemas/DocumentStatus'
          type: array
      type: object
    DeleteIntegrationResponse:
      example:
        data:
          s3:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          description: AWS account with event data for the data science team.
          created_at: 2001-08-28T00:23:41Z
          created_by: hello@rockset.com
          kinesis:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          dynamodb:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          redshift:
            password: pswd....
            port: 5439
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            host: test.yuyugt.us-west-2.redshift.amazonaws.com
            s3_bucket_path: s3://redshift-unload
            username: awsuser
          collections:
          - workspace: commons
            aliases:
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
            field_schemas:
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            retention_secs: 2592000
            name: global-transactions
            inverted_index_group_encoding_options:
              group_size: 0
              restart_length: 6
              doc_id_codec: doc_id_codec
              event_time_codec: event_time_codec
            fieldPartitions:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            status: READY
          - workspace: commons
            aliases:
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
            field_schemas:
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            retention_secs: 2592000
            name: global-transactions
            inverted_index_group_encoding_options:
              group_size: 0
              restart_length: 6
              doc_id_codec: doc_id_codec
              event_time_codec: event_time_codec
            fieldPartitions:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            status: READY
          gcs:
            gcp_service_account:
              service_account_key_file_json: service_account_key_file_json
          segment:
            connection_string: connection_string
          kafka:
            source_status_by_topic: topic-a:DORMANT
            kafka_topic_names:
            - kafka_topic_names
            - kafka_topic_names
            kafka_data_format: json
            connection_string: connection_string
          name: event-logs
          mongodb:
            connection_uri: mongodb+srv://<username>:<password>@server.example.com/
      properties:
        data:
          $ref: '#/components/schemas/Integration'
      type: object
    DeleteIpAllowlistResponse:
      example:
        data:
          creator_email: xyz@rockset.com
          name: Office
          description: Office IP address
          created_at: 2001-08-28T00:23:41Z
          ip_address: 82.217.192.0/18
      properties:
        data:
          $ref: '#/components/schemas/IpAllowlist'
      type: object
    DeleteQueryLambdaResponse:
      example:
        data:
          workspace: commons
          last_updated_by: ..@rockset.com
          last_updated: 2001-08-28T00:23:41Z
          latest_version:
            workspace: commons
            collections:
            - collections
            - collections
            stats:
              last_executed_by: '...@rockset.com'
              last_execution_error_message: '[error message]'
              last_execution_error: 2001-08-28T00:23:41Z
              last_executed: 2001-08-28T00:23:41Z
            name: myQuery
            created_at: 2001-08-28T00:23:41Z
            description: production version foo
            state: ACTIVE
            created_by: ..@rockset.com
            version: acb99feg92bcaf
            sql:
              default_parameters:
              - name: _id
                type: string
                value: 85beb391
              - name: _id
                type: string
                value: 85beb391
              query: SELECT 'Foo'
          collections:
          - collections
          - collections
          name: myQuery
          version_count: 1
      properties:
        data:
          $ref: '#/components/schemas/QueryLambda'
      type: object
    DeleteUserResponse:
      example:
        data:
          org: org
          roles: '["admin", "member", "read-only"]'
          created_at: 2001-08-28T00:23:41Z
          last_name: Doe
          invite_state: PENDING
          state: ACTIVE
          orgs:
          - deletionScheduledAt: deletionScheduledAt
            company_name: Rockset, Inc
            created_at: 2001-08-28T00:23:41Z
            external_id: <hash>
            id: rockset
            rockset_user: rockset_user
            state: TRIAL
            display_name: Rockset, Inc
            clusters:
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
          - deletionScheduledAt: deletionScheduledAt
            company_name: Rockset, Inc
            created_at: 2001-08-28T00:23:41Z
            external_id: <hash>
            id: rockset
            rockset_user: rockset_user
            state: TRIAL
            display_name: Rockset, Inc
            clusters:
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
          org_memberships:
          - expires_at: 2001-08-29T00:23:41Z
            organization:
              deletionScheduledAt: deletionScheduledAt
              company_name: Rockset, Inc
              created_at: 2001-08-28T00:23:41Z
              external_id: <hash>
              id: rockset
              rockset_user: rockset_user
              state: TRIAL
              display_name: Rockset, Inc
              clusters:
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
            roles:
            - roles
            - roles
            invite_state: PENDING
            created_at: 2001-08-28T00:23:41Z
            invited_by: invited_by
            email: email
          - expires_at: 2001-08-29T00:23:41Z
            organization:
              deletionScheduledAt: deletionScheduledAt
              company_name: Rockset, Inc
              created_at: 2001-08-28T00:23:41Z
              external_id: <hash>
              id: rockset
              rockset_user: rockset_user
              state: TRIAL
              display_name: Rockset, Inc
              clusters:
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
            roles:
            - roles
            - roles
            invite_state: PENDING
            created_at: 2001-08-28T00:23:41Z
            invited_by: invited_by
            email: email
          first_name: John
          email: hello@rockset.com
      properties:
        data:
          $ref: '#/components/schemas/User'
      type: object
    DeleteWorkspaceResponse:
      example:
        data:
          name: event_logs
          created_at: 2001-08-28T00:23:41Z
          description: Datasets of system logs for the ops team.
          collection_count: 3
          created_by: hello@rockset.com
      properties:
        data:
          $ref: '#/components/schemas/Workspace'
      type: object
    DocumentStatus:
      example:
        patch_id: 486gsg8
        _collection: customers
        _id: 2cd61e3b
        error:
          trace_id: trace_id
          error_id: error_id
          line: 0
          column: 6
          message: collection not found
          type: InvalidInput
        status: ADDED
      properties:
        _collection:
          description: collection name
          example: customers
          type: string
        error:
          $ref: '#/components/schemas/ErrorModel'
        _id:
          description: unique document ID
          example: 2cd61e3b
          type: string
        status:
          description: status, one of ADDED, REPLACED, DELETED, ERROR
          enum:
          - ADDED
          - REPLACED
          - DELETED
          - PATCHED
          - ERROR
          example: ADDED
          type: string
        patch_id:
          description: unique id used to represent each patch request
          example: 486gsg8
          type: string
      type: object
    DynamodbIntegration:
      example:
        aws_access_key:
          aws_access_key_id: AKIAIOSFODNN7EXAMPLE
          aws_secret_access_key: wJal....
        aws_role:
          aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
      properties:
        aws_access_key:
          $ref: '#/components/schemas/AwsAccessKey'
        aws_role:
          $ref: '#/components/schemas/AwsRole'
      type: object
    ErrorModel:
      description: Describes details about an error
      example:
        trace_id: trace_id
        error_id: error_id
        line: 0
        column: 6
        message: collection not found
        type: InvalidInput
      properties:
        message:
          description: descriptive message about the error
          example: collection not found
          type: string
        type:
          description: category of the error
          enum:
          - AUTHEXCEPTION
          - VERSIONEXCEPTION
          - INTERNALERROR
          - INVALIDINPUT
          - NOTIMPLEMENTEDYET
          - RESOURCEEXCEEDED
          - ALREADYEXISTS
          - NOTALLOWED
          - NOTACCEPTABLE
          - NOTSUPPORTED
          - NOTFOUND
          - DEPENDENTRESOURCES
          - QUERY_ERROR
          - NOT_READY
          - FORBIDDEN
          - QUERY_TIMEOUT
          - ROLE_NOT_FOUND
          - CONNECTION_ERROR
          - CREATING
          - BADREQUEST
          - RATELIMITEXCEEDED
          example: InvalidInput
          type: string
        line:
          description: Line where the error happened (if applicable)
          format: int32
          type: integer
        column:
          description: Column where the error happened (if applicable)
          format: int32
          type: integer
        trace_id:
          description: Internal trace ID to help with debugging
          type: string
        error_id:
          description: ID of the error
          type: string
      type: object
    EventTimeInfo:
      example:
        field: timestamp
        format: seconds_since_epoch
        time_zone: UTC
      properties:
        field:
          description: name of the field containing event time
          example: timestamp
          type: string
        format:
          description: 'format of time field, can be one of: milliseconds_since_epoch,
            seconds_since_epoch'
          example: seconds_since_epoch
          type: string
        time_zone:
          description: default time zone, in standard IANA format
          example: UTC
          type: string
      required:
      - field
      type: object
    ExecuteQueryLambdaRequest:
      example:
        generate_warnings: true
        default_row_limit: 0
        parameters:
        - name: _id
          type: string
          value: 85beb391
        - name: _id
          type: string
          value: 85beb391
      properties:
        parameters:
          description: list of named parameters
          items:
            $ref: '#/components/schemas/QueryParameter'
          type: array
        default_row_limit:
          description: Row limit to use if no limit specified in the SQL query text
          format: int32
          type: integer
        generate_warnings:
          description: Whether to generate warnings
          type: boolean
      type: object
    FieldMapping:
      type: object
    FieldMappingV2:
      example:
        output_field:
          on_error: '[''SKIP'', ''FAIL'']'
          value:
            sql: SHA256()
          field_name: zip_hash
        name: myTestMapping
        input_fields:
        - is_drop: true
          if_missing: '[''SKIP'', ''PASS'']'
          param: zip
          field_name: address.city.zipcode
        - is_drop: true
          if_missing: '[''SKIP'', ''PASS'']'
          param: zip
          field_name: address.city.zipcode
        is_drop_all_fields: true
      properties:
        name:
          description: A user specified string that is a name for this mapping
          example: myTestMapping
          type: string
        is_drop_all_fields:
          description: A boolean that determines whether to drop all fields in this
            document. If set, input and output fields should not be set
          example: true
          type: boolean
        input_fields:
          description: A List of InputField for this mapping
          items:
            $ref: '#/components/schemas/InputField'
          type: array
        output_field:
          $ref: '#/components/schemas/OutputField'
      type: object
    FieldMask:
      example:
        input_path:
        - input_path
        - input_path
        mask:
          args: '{}'
          name: name
      properties:
        input_path:
          items:
            type: string
          type: array
        mask:
          $ref: '#/components/schemas/FieldMaskMask'
      required:
      - input_path
      type: object
    FieldMaskMask:
      description: Field masking function name + args. The args is a JSON object.
      example:
        args: '{}'
        name: name
      properties:
        name:
          type: string
        args:
          properties: {}
          type: object
      required:
      - name
      type: object
    FieldOptions:
      example:
        range_index_mode: v1_index
        index_mode: index
        type_index_mode: index
        column_index_mode: store
      properties:
        index_mode:
          description: ' index or no_index'
          example: index
          type: string
        range_index_mode:
          description: ' v1_index or no_index'
          example: v1_index
          type: string
        type_index_mode:
          description: ' index or no_index'
          example: index
          type: string
        column_index_mode:
          description: ' store or no_store'
          example: store
          type: string
      type: object
    FieldPartition:
      example:
        keys: Values of a record to partition on. This is not needed if the partition
          type is AUTO
        type: AUTO
        field_name: address.city.zipcode
      properties:
        field_name:
          description: The name of a field, parsed as a SQL qualified name
          example: address.city.zipcode
          type: string
        type:
          description: The type of partitions on a field
          enum:
          - AUTO
          example: AUTO
          type: string
        keys:
          description: The values for partitioning of a field
          example: Values of a record to partition on. This is not needed if the partition
            type is AUTO
          items:
            type: string
          type: array
      type: object
    FieldSchema:
      example:
        field_options:
          range_index_mode: v1_index
          index_mode: index
          type_index_mode: index
          column_index_mode: store
        field_name: address.city.zipcode
      properties:
        field_name:
          description: The name of a field, parsed as a SQL qualified name
          example: address.city.zipcode
          type: string
        field_options:
          $ref: '#/components/schemas/FieldOptions'
      type: object
    FormatParams:
      example:
        xml:
          attribute_prefix: _attr
          doc_tag: row
          encoding: UTF-8
          value_tag: value
          root_tag: root
        csv:
          quoteChar: '"'
          escapeChar: \
          columnNames: '[c1, c2, c3]'
          columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
          firstLineAsColumnNames: true
          encoding: UTF-8
          separator: ','
        json: true
      properties:
        json:
          description: source data is in json format
          example: true
          type: boolean
        csv:
          $ref: '#/components/schemas/CsvParams'
        xml:
          $ref: '#/components/schemas/XmlParams'
      type: object
    GcpServiceAccount:
      example:
        service_account_key_file_json: service_account_key_file_json
      properties:
        service_account_key_file_json:
          description: Contents of JSON Service Account key file
          type: string
      required:
      - service_account_key_file_json
      type: object
    GcsIntegration:
      example:
        gcp_service_account:
          service_account_key_file_json: service_account_key_file_json
      properties:
        gcp_service_account:
          $ref: '#/components/schemas/GcpServiceAccount'
      type: object
    GetAliasResponse:
      example:
        data:
          workspace: commons
          collections: '[common.foo, prod.demo]'
          creator_email: xyz@rockset.com
          name: demo
          description: alias referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
      properties:
        data:
          $ref: '#/components/schemas/Alias'
      type: object
    GetCollectionResponse:
      example:
        data:
          workspace: commons
          aliases:
          - workspace: commons
            collections: '[common.foo, prod.demo]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          - workspace: commons
            collections: '[common.foo, prod.demo]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          sources:
          - integration_name: aws-integration
            s3:
              bucket: s3://customer-account-info
              prefixes: '[''/transactions'', ''/stores'']'
              mappings:
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              prefix: prefix/to/keys
              access_key: AKIAIOSFODNN7EXAMPLE
              pattern: prefix/to/**/keys/*.format
              format: none
              region: us-west-2
            redshift:
              schema: common
              incremental_field: updated_at
              database: dev
              table_name: redshift_table_name
            gcs:
              bucket: server-logs
              prefix: prefix/to/keys
            kafka:
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '[c1, c2, c3]'
                columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              json: true
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              stream_name: click_stream
              aws_region: us-east-2
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_error_at: 2019-01-15T21:48:23Z
              total_error_items: 32849023
              last_processed_at: 2019-01-15T21:48:23Z
              last_error_item: /path/to/some/object
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
              last_error_reason: invalid format .docx
              since: 2019-01-15T21:48:23Z
          - integration_name: aws-integration
            s3:
              bucket: s3://customer-account-info
              prefixes: '[''/transactions'', ''/stores'']'
              mappings:
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              prefix: prefix/to/keys
              access_key: AKIAIOSFODNN7EXAMPLE
              pattern: prefix/to/**/keys/*.format
              format: none
              region: us-west-2
            redshift:
              schema: common
              incremental_field: updated_at
              database: dev
              table_name: redshift_table_name
            gcs:
              bucket: server-logs
              prefix: prefix/to/keys
            kafka:
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '[c1, c2, c3]'
                columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              json: true
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              stream_name: click_stream
              aws_region: us-east-2
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_error_at: 2019-01-15T21:48:23Z
              total_error_items: 32849023
              last_processed_at: 2019-01-15T21:48:23Z
              last_error_item: /path/to/some/object
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
              last_error_reason: invalid format .docx
              since: 2019-01-15T21:48:23Z
          created_at: 2001-08-28T00:23:41Z
          description: transactions from stores worldwide
          clustering_key:
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          created_by: hello@rockset.com
          field_mappings:
          - output_field:
              on_error: '[''SKIP'', ''FAIL'']'
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          - output_field:
              on_error: '[''SKIP'', ''FAIL'']'
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          stats:
            doc_count: 2145
            inverted_index_size: 123456
            last_updated_ms: 1535101094433
            total_size: 123456
            purged_doc_count: 2145
            range_index_size: 123456
            purged_doc_size: 123456
            fill_progress: 0.6
            bytes_overwritten: 123456
            bytes_inserted: 123456
            total_index_size: 123456
            column_index_size: 123456
            last_queried_ms: 1535101119334
            row_index_size: 123456
          field_schemas:
          - field_options:
              range_index_mode: v1_index
              index_mode: index
              type_index_mode: index
              column_index_mode: store
            field_name: address.city.zipcode
          - field_options:
              range_index_mode: v1_index
              index_mode: index
              type_index_mode: index
              column_index_mode: store
            field_name: address.city.zipcode
          retention_secs: 2592000
          name: global-transactions
          inverted_index_group_encoding_options:
            group_size: 0
            restart_length: 6
            doc_id_codec: doc_id_codec
            event_time_codec: event_time_codec
          fieldPartitions:
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          status: READY
      properties:
        data:
          $ref: '#/components/schemas/Collection'
      type: object
    GetIntegrationResponse:
      example:
        data:
          s3:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          description: AWS account with event data for the data science team.
          created_at: 2001-08-28T00:23:41Z
          created_by: hello@rockset.com
          kinesis:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          dynamodb:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          redshift:
            password: pswd....
            port: 5439
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            host: test.yuyugt.us-west-2.redshift.amazonaws.com
            s3_bucket_path: s3://redshift-unload
            username: awsuser
          collections:
          - workspace: commons
            aliases:
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
            field_schemas:
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            retention_secs: 2592000
            name: global-transactions
            inverted_index_group_encoding_options:
              group_size: 0
              restart_length: 6
              doc_id_codec: doc_id_codec
              event_time_codec: event_time_codec
            fieldPartitions:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            status: READY
          - workspace: commons
            aliases:
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
            field_schemas:
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            retention_secs: 2592000
            name: global-transactions
            inverted_index_group_encoding_options:
              group_size: 0
              restart_length: 6
              doc_id_codec: doc_id_codec
              event_time_codec: event_time_codec
            fieldPartitions:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            status: READY
          gcs:
            gcp_service_account:
              service_account_key_file_json: service_account_key_file_json
          segment:
            connection_string: connection_string
          kafka:
            source_status_by_topic: topic-a:DORMANT
            kafka_topic_names:
            - kafka_topic_names
            - kafka_topic_names
            kafka_data_format: json
            connection_string: connection_string
          name: event-logs
          mongodb:
            connection_uri: mongodb+srv://<username>:<password>@server.example.com/
      properties:
        data:
          $ref: '#/components/schemas/Integration'
      type: object
    GetIpAllowlistResponse:
      example:
        data:
          creator_email: xyz@rockset.com
          name: Office
          description: Office IP address
          created_at: 2001-08-28T00:23:41Z
          ip_address: 82.217.192.0/18
      properties:
        data:
          $ref: '#/components/schemas/IpAllowlist'
      type: object
    GetVirtualInstanceResponse:
      example:
        data:
          desired_type: FREE
          last_updated: 2001-08-28T00:23:41Z
          estimated_switch_duration_minutes: 20
          scaled_pod_count: 6
          monitoring_enabled: true
          desired_size: MEDIUM
          current_size: MEDIUM
          state: ACTIVE
          id: 123e4567-e89b-12d3-a456-556642440000
          current_type: FREE
          default_pod_count: 0
      properties:
        data:
          $ref: '#/components/schemas/VirtualInstance'
      type: object
    GetWorkspaceResponse:
      example:
        data:
          name: event_logs
          created_at: 2001-08-28T00:23:41Z
          description: Datasets of system logs for the ops team.
          collection_count: 3
          created_by: hello@rockset.com
      properties:
        data:
          $ref: '#/components/schemas/Workspace'
      type: object
    InputField:
      example:
        is_drop: true
        if_missing: '[''SKIP'', ''PASS'']'
        param: zip
        field_name: address.city.zipcode
      properties:
        field_name:
          description: The name of a field, parsed as a SQL qualified name
          example: address.city.zipcode
          type: string
        if_missing:
          description: Define the behaviour if fieldName is missing or is null
          enum:
          - SKIP
          - PASS
          example: '[''SKIP'', ''PASS'']'
          type: string
        is_drop:
          description: If true, then drop fieldName from the document
          example: true
          type: boolean
        param:
          description: Sql parameter name
          example: zip
          type: string
      type: object
    Integration:
      description: Integrations that can be associated with data sources to create
        collections. Only one type of integration may be specified.
      example:
        s3:
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
        description: AWS account with event data for the data science team.
        created_at: 2001-08-28T00:23:41Z
        created_by: hello@rockset.com
        kinesis:
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
        dynamodb:
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          aws_role:
            aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
        redshift:
          password: pswd....
          port: 5439
          aws_access_key:
            aws_access_key_id: AKIAIOSFODNN7EXAMPLE
            aws_secret_access_key: wJal....
          host: test.yuyugt.us-west-2.redshift.amazonaws.com
          s3_bucket_path: s3://redshift-unload
          username: awsuser
        collections:
        - workspace: commons
          aliases:
          - workspace: commons
            collections: '[common.foo, prod.demo]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          - workspace: commons
            collections: '[common.foo, prod.demo]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          sources:
          - integration_name: aws-integration
            s3:
              bucket: s3://customer-account-info
              prefixes: '[''/transactions'', ''/stores'']'
              mappings:
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              prefix: prefix/to/keys
              access_key: AKIAIOSFODNN7EXAMPLE
              pattern: prefix/to/**/keys/*.format
              format: none
              region: us-west-2
            redshift:
              schema: common
              incremental_field: updated_at
              database: dev
              table_name: redshift_table_name
            gcs:
              bucket: server-logs
              prefix: prefix/to/keys
            kafka:
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '[c1, c2, c3]'
                columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              json: true
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              stream_name: click_stream
              aws_region: us-east-2
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_error_at: 2019-01-15T21:48:23Z
              total_error_items: 32849023
              last_processed_at: 2019-01-15T21:48:23Z
              last_error_item: /path/to/some/object
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
              last_error_reason: invalid format .docx
              since: 2019-01-15T21:48:23Z
          - integration_name: aws-integration
            s3:
              bucket: s3://customer-account-info
              prefixes: '[''/transactions'', ''/stores'']'
              mappings:
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              prefix: prefix/to/keys
              access_key: AKIAIOSFODNN7EXAMPLE
              pattern: prefix/to/**/keys/*.format
              format: none
              region: us-west-2
            redshift:
              schema: common
              incremental_field: updated_at
              database: dev
              table_name: redshift_table_name
            gcs:
              bucket: server-logs
              prefix: prefix/to/keys
            kafka:
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '[c1, c2, c3]'
                columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              json: true
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              stream_name: click_stream
              aws_region: us-east-2
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_error_at: 2019-01-15T21:48:23Z
              total_error_items: 32849023
              last_processed_at: 2019-01-15T21:48:23Z
              last_error_item: /path/to/some/object
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
              last_error_reason: invalid format .docx
              since: 2019-01-15T21:48:23Z
          created_at: 2001-08-28T00:23:41Z
          description: transactions from stores worldwide
          clustering_key:
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          created_by: hello@rockset.com
          field_mappings:
          - output_field:
              on_error: '[''SKIP'', ''FAIL'']'
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          - output_field:
              on_error: '[''SKIP'', ''FAIL'']'
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          stats:
            doc_count: 2145
            inverted_index_size: 123456
            last_updated_ms: 1535101094433
            total_size: 123456
            purged_doc_count: 2145
            range_index_size: 123456
            purged_doc_size: 123456
            fill_progress: 0.6
            bytes_overwritten: 123456
            bytes_inserted: 123456
            total_index_size: 123456
            column_index_size: 123456
            last_queried_ms: 1535101119334
            row_index_size: 123456
          field_schemas:
          - field_options:
              range_index_mode: v1_index
              index_mode: index
              type_index_mode: index
              column_index_mode: store
            field_name: address.city.zipcode
          - field_options:
              range_index_mode: v1_index
              index_mode: index
              type_index_mode: index
              column_index_mode: store
            field_name: address.city.zipcode
          retention_secs: 2592000
          name: global-transactions
          inverted_index_group_encoding_options:
            group_size: 0
            restart_length: 6
            doc_id_codec: doc_id_codec
            event_time_codec: event_time_codec
          fieldPartitions:
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          status: READY
        - workspace: commons
          aliases:
          - workspace: commons
            collections: '[common.foo, prod.demo]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          - workspace: commons
            collections: '[common.foo, prod.demo]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          sources:
          - integration_name: aws-integration
            s3:
              bucket: s3://customer-account-info
              prefixes: '[''/transactions'', ''/stores'']'
              mappings:
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              prefix: prefix/to/keys
              access_key: AKIAIOSFODNN7EXAMPLE
              pattern: prefix/to/**/keys/*.format
              format: none
              region: us-west-2
            redshift:
              schema: common
              incremental_field: updated_at
              database: dev
              table_name: redshift_table_name
            gcs:
              bucket: server-logs
              prefix: prefix/to/keys
            kafka:
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '[c1, c2, c3]'
                columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              json: true
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              stream_name: click_stream
              aws_region: us-east-2
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_error_at: 2019-01-15T21:48:23Z
              total_error_items: 32849023
              last_processed_at: 2019-01-15T21:48:23Z
              last_error_item: /path/to/some/object
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
              last_error_reason: invalid format .docx
              since: 2019-01-15T21:48:23Z
          - integration_name: aws-integration
            s3:
              bucket: s3://customer-account-info
              prefixes: '[''/transactions'', ''/stores'']'
              mappings:
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              prefix: prefix/to/keys
              access_key: AKIAIOSFODNN7EXAMPLE
              pattern: prefix/to/**/keys/*.format
              format: none
              region: us-west-2
            redshift:
              schema: common
              incremental_field: updated_at
              database: dev
              table_name: redshift_table_name
            gcs:
              bucket: server-logs
              prefix: prefix/to/keys
            kafka:
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '[c1, c2, c3]'
                columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              json: true
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              stream_name: click_stream
              aws_region: us-east-2
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_error_at: 2019-01-15T21:48:23Z
              total_error_items: 32849023
              last_processed_at: 2019-01-15T21:48:23Z
              last_error_item: /path/to/some/object
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
              last_error_reason: invalid format .docx
              since: 2019-01-15T21:48:23Z
          created_at: 2001-08-28T00:23:41Z
          description: transactions from stores worldwide
          clustering_key:
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          created_by: hello@rockset.com
          field_mappings:
          - output_field:
              on_error: '[''SKIP'', ''FAIL'']'
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          - output_field:
              on_error: '[''SKIP'', ''FAIL'']'
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          stats:
            doc_count: 2145
            inverted_index_size: 123456
            last_updated_ms: 1535101094433
            total_size: 123456
            purged_doc_count: 2145
            range_index_size: 123456
            purged_doc_size: 123456
            fill_progress: 0.6
            bytes_overwritten: 123456
            bytes_inserted: 123456
            total_index_size: 123456
            column_index_size: 123456
            last_queried_ms: 1535101119334
            row_index_size: 123456
          field_schemas:
          - field_options:
              range_index_mode: v1_index
              index_mode: index
              type_index_mode: index
              column_index_mode: store
            field_name: address.city.zipcode
          - field_options:
              range_index_mode: v1_index
              index_mode: index
              type_index_mode: index
              column_index_mode: store
            field_name: address.city.zipcode
          retention_secs: 2592000
          name: global-transactions
          inverted_index_group_encoding_options:
            group_size: 0
            restart_length: 6
            doc_id_codec: doc_id_codec
            event_time_codec: event_time_codec
          fieldPartitions:
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          status: READY
        gcs:
          gcp_service_account:
            service_account_key_file_json: service_account_key_file_json
        segment:
          connection_string: connection_string
        kafka:
          source_status_by_topic: topic-a:DORMANT
          kafka_topic_names:
          - kafka_topic_names
          - kafka_topic_names
          kafka_data_format: json
          connection_string: connection_string
        name: event-logs
        mongodb:
          connection_uri: mongodb+srv://<username>:<password>@server.example.com/
      properties:
        name:
          description: descriptive label and unique identifier
          example: event-logs
          type: string
        description:
          description: longer explanation for the integration
          example: AWS account with event data for the data science team.
          type: string
        collections:
          description: list of collections that use the integration
          items:
            $ref: '#/components/schemas/Collection'
          type: array
        created_by:
          description: email of user who created the integration
          example: hello@rockset.com
          type: string
        created_at:
          description: ISO-8601 date
          example: 2001-08-28T00:23:41Z
          type: string
        s3:
          $ref: '#/components/schemas/S3Integration'
        kinesis:
          $ref: '#/components/schemas/KinesisIntegration'
        dynamodb:
          $ref: '#/components/schemas/DynamodbIntegration'
        redshift:
          $ref: '#/components/schemas/RedshiftIntegration'
        gcs:
          $ref: '#/components/schemas/GcsIntegration'
        segment:
          $ref: '#/components/schemas/SegmentIntegration'
        kafka:
          $ref: '#/components/schemas/KafkaIntegration'
        mongodb:
          $ref: '#/components/schemas/MongoDbIntegration'
      required:
      - created_by
      - name
      type: object
    InvertedIndexGroupEncodingOptions:
      example:
        group_size: 0
        restart_length: 6
        doc_id_codec: doc_id_codec
        event_time_codec: event_time_codec
      properties:
        group_size:
          format: int64
          type: integer
        restart_length:
          format: int64
          type: integer
        event_time_codec:
          type: string
        doc_id_codec:
          type: string
      type: object
    IpAllowlist:
      example:
        creator_email: xyz@rockset.com
        name: Office
        description: Office IP address
        created_at: 2001-08-28T00:23:41Z
        ip_address: 82.217.192.0/18
      properties:
        name:
          description: IP Allowlist policy name
          example: Office
          type: string
        description:
          description: optional description
          example: Office IP address
          type: string
        creator_email:
          description: email of the creator
          example: xyz@rockset.com
          type: string
        ip_address:
          description: individual IP address or range of IP addresses in CIDR notation
          example: 82.217.192.0/18
          type: string
        created_at:
          description: ISO-8601 date
          example: 2001-08-28T00:23:41Z
          type: string
      required:
      - ip_address
      - name
      type: object
    KafkaIntegration:
      example:
        source_status_by_topic: topic-a:DORMANT
        kafka_topic_names:
        - kafka_topic_names
        - kafka_topic_names
        kafka_data_format: json
        connection_string: connection_string
      properties:
        kafka_topic_names:
          description: Kafka topics to tail
          items:
            type: string
          type: array
          uniqueItems: true
        source_status_by_topic:
          additionalProperties:
            $ref: '#/components/schemas/StatusKafka'
          description: The status of the Kafka source by topic
          example: topic-a:DORMANT
          readOnly: true
          type: object
        kafka_data_format:
          description: The format of the Kafka topics being tailed
          enum:
          - JSON
          - AVRO
          example: json
          type: string
        connection_string:
          description: kafka connection string
          readOnly: true
          type: string
      required:
      - kafka_data_format
      - kafka_topic_names
      type: object
    KinesisIntegration:
      example:
        aws_access_key:
          aws_access_key_id: AKIAIOSFODNN7EXAMPLE
          aws_secret_access_key: wJal....
        aws_role:
          aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
      properties:
        aws_access_key:
          $ref: '#/components/schemas/AwsAccessKey'
        aws_role:
          $ref: '#/components/schemas/AwsRole'
      type: object
    ListAliasesResponse:
      example:
        data:
        - workspace: commons
          collections: '[common.foo, prod.demo]'
          creator_email: xyz@rockset.com
          name: demo
          description: alias referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
        - workspace: commons
          collections: '[common.foo, prod.demo]'
          creator_email: xyz@rockset.com
          name: demo
          description: alias referencing collection in workspace
          created_at: 2001-08-28T00:23:41Z
          state: CREATED
          modified_at: 2001-08-28T00:23:42Z
      properties:
        data:
          description: list of all aliases
          items:
            $ref: '#/components/schemas/Alias'
          type: array
      type: object
    ListApiKeysResponse:
      example:
        data:
        - name: my-event-logger-key
          created_at: 2001-08-28T00:23:41Z
          created_by: created_by
          key: aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT
          last_access_time: 2001-08-28T00:23:41Z
        - name: my-event-logger-key
          created_at: 2001-08-28T00:23:41Z
          created_by: created_by
          key: aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT
          last_access_time: 2001-08-28T00:23:41Z
      properties:
        data:
          description: list of API key objects
          items:
            $ref: '#/components/schemas/ApiKey'
          type: array
      type: object
    ListCollectionsResponse:
      example:
        data:
        - workspace: commons
          aliases:
          - workspace: commons
            collections: '[common.foo, prod.demo]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          - workspace: commons
            collections: '[common.foo, prod.demo]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          sources:
          - integration_name: aws-integration
            s3:
              bucket: s3://customer-account-info
              prefixes: '[''/transactions'', ''/stores'']'
              mappings:
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              prefix: prefix/to/keys
              access_key: AKIAIOSFODNN7EXAMPLE
              pattern: prefix/to/**/keys/*.format
              format: none
              region: us-west-2
            redshift:
              schema: common
              incremental_field: updated_at
              database: dev
              table_name: redshift_table_name
            gcs:
              bucket: server-logs
              prefix: prefix/to/keys
            kafka:
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '[c1, c2, c3]'
                columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              json: true
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              stream_name: click_stream
              aws_region: us-east-2
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_error_at: 2019-01-15T21:48:23Z
              total_error_items: 32849023
              last_processed_at: 2019-01-15T21:48:23Z
              last_error_item: /path/to/some/object
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
              last_error_reason: invalid format .docx
              since: 2019-01-15T21:48:23Z
          - integration_name: aws-integration
            s3:
              bucket: s3://customer-account-info
              prefixes: '[''/transactions'', ''/stores'']'
              mappings:
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              prefix: prefix/to/keys
              access_key: AKIAIOSFODNN7EXAMPLE
              pattern: prefix/to/**/keys/*.format
              format: none
              region: us-west-2
            redshift:
              schema: common
              incremental_field: updated_at
              database: dev
              table_name: redshift_table_name
            gcs:
              bucket: server-logs
              prefix: prefix/to/keys
            kafka:
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '[c1, c2, c3]'
                columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              json: true
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              stream_name: click_stream
              aws_region: us-east-2
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_error_at: 2019-01-15T21:48:23Z
              total_error_items: 32849023
              last_processed_at: 2019-01-15T21:48:23Z
              last_error_item: /path/to/some/object
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
              last_error_reason: invalid format .docx
              since: 2019-01-15T21:48:23Z
          created_at: 2001-08-28T00:23:41Z
          description: transactions from stores worldwide
          clustering_key:
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          created_by: hello@rockset.com
          field_mappings:
          - output_field:
              on_error: '[''SKIP'', ''FAIL'']'
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          - output_field:
              on_error: '[''SKIP'', ''FAIL'']'
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          stats:
            doc_count: 2145
            inverted_index_size: 123456
            last_updated_ms: 1535101094433
            total_size: 123456
            purged_doc_count: 2145
            range_index_size: 123456
            purged_doc_size: 123456
            fill_progress: 0.6
            bytes_overwritten: 123456
            bytes_inserted: 123456
            total_index_size: 123456
            column_index_size: 123456
            last_queried_ms: 1535101119334
            row_index_size: 123456
          field_schemas:
          - field_options:
              range_index_mode: v1_index
              index_mode: index
              type_index_mode: index
              column_index_mode: store
            field_name: address.city.zipcode
          - field_options:
              range_index_mode: v1_index
              index_mode: index
              type_index_mode: index
              column_index_mode: store
            field_name: address.city.zipcode
          retention_secs: 2592000
          name: global-transactions
          inverted_index_group_encoding_options:
            group_size: 0
            restart_length: 6
            doc_id_codec: doc_id_codec
            event_time_codec: event_time_codec
          fieldPartitions:
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          status: READY
        - workspace: commons
          aliases:
          - workspace: commons
            collections: '[common.foo, prod.demo]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          - workspace: commons
            collections: '[common.foo, prod.demo]'
            creator_email: xyz@rockset.com
            name: demo
            description: alias referencing collection in workspace
            created_at: 2001-08-28T00:23:41Z
            state: CREATED
            modified_at: 2001-08-28T00:23:42Z
          sources:
          - integration_name: aws-integration
            s3:
              bucket: s3://customer-account-info
              prefixes: '[''/transactions'', ''/stores'']'
              mappings:
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              prefix: prefix/to/keys
              access_key: AKIAIOSFODNN7EXAMPLE
              pattern: prefix/to/**/keys/*.format
              format: none
              region: us-west-2
            redshift:
              schema: common
              incremental_field: updated_at
              database: dev
              table_name: redshift_table_name
            gcs:
              bucket: server-logs
              prefix: prefix/to/keys
            kafka:
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '[c1, c2, c3]'
                columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              json: true
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              stream_name: click_stream
              aws_region: us-east-2
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_error_at: 2019-01-15T21:48:23Z
              total_error_items: 32849023
              last_processed_at: 2019-01-15T21:48:23Z
              last_error_item: /path/to/some/object
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
              last_error_reason: invalid format .docx
              since: 2019-01-15T21:48:23Z
          - integration_name: aws-integration
            s3:
              bucket: s3://customer-account-info
              prefixes: '[''/transactions'', ''/stores'']'
              mappings:
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              - input_path:
                - input_path
                - input_path
                mask:
                  args: '{}'
                  name: name
              secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              prefix: prefix/to/keys
              access_key: AKIAIOSFODNN7EXAMPLE
              pattern: prefix/to/**/keys/*.format
              format: none
              region: us-west-2
            redshift:
              schema: common
              incremental_field: updated_at
              database: dev
              table_name: redshift_table_name
            gcs:
              bucket: server-logs
              prefix: prefix/to/keys
            kafka:
              kafka_topic_name: example-topic
              status:
                num_documents_processed: 1337
                last_consumed_time: 2001-08-28T00:23:41Z
                state: ACTIVE
            format_params:
              xml:
                attribute_prefix: _attr
                doc_tag: row
                encoding: UTF-8
                value_tag: value
                root_tag: root
              csv:
                quoteChar: '"'
                escapeChar: \
                columnNames: '[c1, c2, c3]'
                columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                firstLineAsColumnNames: true
                encoding: UTF-8
                separator: ','
              json: true
            file_upload:
              file_name: file1.json
              file_size: 12345
              file_upload_time: 2019-01-15T21:48:23Z
            kinesis:
              stream_name: click_stream
              aws_region: us-east-2
            mongodb:
              database_name: my_database
              collection_name: my_collection
              status:
                scan_total_records: 2000
                stream_records_deleted: 100
                stream_records_inserted: 10000
                stream_records_updated: 1000
                scan_start_time: 2001-08-28T00:23:41Z
                stream_last_update_processed_at: 2019-01-15T21:48:23Z
                stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                scan_end_time: 2001-08-28T00:23:41Z
                stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            dynamodb:
              aws_region: us-east-2
              rcu: 1000
              table_name: dynamodb_table_name
              status:
                scan_total_records: 2000
                stream_last_processed_at: 2019-01-15T21:48:23Z
                scan_start_time: 2001-08-28T00:23:41Z
                scan_end_time: 2001-08-28T00:23:41Z
                scan_records_processed: 1000
                state: SCANNING_TABLE
            status:
              last_processed_item: /path/to/some/object
              last_error_at: 2019-01-15T21:48:23Z
              total_error_items: 32849023
              last_processed_at: 2019-01-15T21:48:23Z
              last_error_item: /path/to/some/object
              total_processed_items: 32849023
              state: INITIALIZING
              message: error 403 forbidden
              last_error_reason: invalid format .docx
              since: 2019-01-15T21:48:23Z
          created_at: 2001-08-28T00:23:41Z
          description: transactions from stores worldwide
          clustering_key:
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          created_by: hello@rockset.com
          field_mappings:
          - output_field:
              on_error: '[''SKIP'', ''FAIL'']'
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          - output_field:
              on_error: '[''SKIP'', ''FAIL'']'
              value:
                sql: SHA256()
              field_name: zip_hash
            name: myTestMapping
            input_fields:
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            - is_drop: true
              if_missing: '[''SKIP'', ''PASS'']'
              param: zip
              field_name: address.city.zipcode
            is_drop_all_fields: true
          stats:
            doc_count: 2145
            inverted_index_size: 123456
            last_updated_ms: 1535101094433
            total_size: 123456
            purged_doc_count: 2145
            range_index_size: 123456
            purged_doc_size: 123456
            fill_progress: 0.6
            bytes_overwritten: 123456
            bytes_inserted: 123456
            total_index_size: 123456
            column_index_size: 123456
            last_queried_ms: 1535101119334
            row_index_size: 123456
          field_schemas:
          - field_options:
              range_index_mode: v1_index
              index_mode: index
              type_index_mode: index
              column_index_mode: store
            field_name: address.city.zipcode
          - field_options:
              range_index_mode: v1_index
              index_mode: index
              type_index_mode: index
              column_index_mode: store
            field_name: address.city.zipcode
          retention_secs: 2592000
          name: global-transactions
          inverted_index_group_encoding_options:
            group_size: 0
            restart_length: 6
            doc_id_codec: doc_id_codec
            event_time_codec: event_time_codec
          fieldPartitions:
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          - keys: Values of a record to partition on. This is not needed if the partition
              type is AUTO
            type: AUTO
            field_name: address.city.zipcode
          status: READY
      properties:
        data:
          description: list of all collections
          items:
            $ref: '#/components/schemas/Collection'
          type: array
      type: object
    ListIntegrationsResponse:
      example:
        data:
        - s3:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          description: AWS account with event data for the data science team.
          created_at: 2001-08-28T00:23:41Z
          created_by: hello@rockset.com
          kinesis:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          dynamodb:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          redshift:
            password: pswd....
            port: 5439
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            host: test.yuyugt.us-west-2.redshift.amazonaws.com
            s3_bucket_path: s3://redshift-unload
            username: awsuser
          collections:
          - workspace: commons
            aliases:
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
            field_schemas:
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            retention_secs: 2592000
            name: global-transactions
            inverted_index_group_encoding_options:
              group_size: 0
              restart_length: 6
              doc_id_codec: doc_id_codec
              event_time_codec: event_time_codec
            fieldPartitions:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            status: READY
          - workspace: commons
            aliases:
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
            field_schemas:
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            retention_secs: 2592000
            name: global-transactions
            inverted_index_group_encoding_options:
              group_size: 0
              restart_length: 6
              doc_id_codec: doc_id_codec
              event_time_codec: event_time_codec
            fieldPartitions:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            status: READY
          gcs:
            gcp_service_account:
              service_account_key_file_json: service_account_key_file_json
          segment:
            connection_string: connection_string
          kafka:
            source_status_by_topic: topic-a:DORMANT
            kafka_topic_names:
            - kafka_topic_names
            - kafka_topic_names
            kafka_data_format: json
            connection_string: connection_string
          name: event-logs
          mongodb:
            connection_uri: mongodb+srv://<username>:<password>@server.example.com/
        - s3:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          description: AWS account with event data for the data science team.
          created_at: 2001-08-28T00:23:41Z
          created_by: hello@rockset.com
          kinesis:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          dynamodb:
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            aws_role:
              aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
          redshift:
            password: pswd....
            port: 5439
            aws_access_key:
              aws_access_key_id: AKIAIOSFODNN7EXAMPLE
              aws_secret_access_key: wJal....
            host: test.yuyugt.us-west-2.redshift.amazonaws.com
            s3_bucket_path: s3://redshift-unload
            username: awsuser
          collections:
          - workspace: commons
            aliases:
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
            field_schemas:
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            retention_secs: 2592000
            name: global-transactions
            inverted_index_group_encoding_options:
              group_size: 0
              restart_length: 6
              doc_id_codec: doc_id_codec
              event_time_codec: event_time_codec
            fieldPartitions:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            status: READY
          - workspace: commons
            aliases:
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            - workspace: commons
              collections: '[common.foo, prod.demo]'
              creator_email: xyz@rockset.com
              name: demo
              description: alias referencing collection in workspace
              created_at: 2001-08-28T00:23:41Z
              state: CREATED
              modified_at: 2001-08-28T00:23:42Z
            sources:
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            - integration_name: aws-integration
              s3:
                bucket: s3://customer-account-info
                prefixes: '[''/transactions'', ''/stores'']'
                mappings:
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                - input_path:
                  - input_path
                  - input_path
                  mask:
                    args: '{}'
                    name: name
                secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
                prefix: prefix/to/keys
                access_key: AKIAIOSFODNN7EXAMPLE
                pattern: prefix/to/**/keys/*.format
                format: none
                region: us-west-2
              redshift:
                schema: common
                incremental_field: updated_at
                database: dev
                table_name: redshift_table_name
              gcs:
                bucket: server-logs
                prefix: prefix/to/keys
              kafka:
                kafka_topic_name: example-topic
                status:
                  num_documents_processed: 1337
                  last_consumed_time: 2001-08-28T00:23:41Z
                  state: ACTIVE
              format_params:
                xml:
                  attribute_prefix: _attr
                  doc_tag: row
                  encoding: UTF-8
                  value_tag: value
                  root_tag: root
                csv:
                  quoteChar: '"'
                  escapeChar: \
                  columnNames: '[c1, c2, c3]'
                  columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
                  firstLineAsColumnNames: true
                  encoding: UTF-8
                  separator: ','
                json: true
              file_upload:
                file_name: file1.json
                file_size: 12345
                file_upload_time: 2019-01-15T21:48:23Z
              kinesis:
                stream_name: click_stream
                aws_region: us-east-2
              mongodb:
                database_name: my_database
                collection_name: my_collection
                status:
                  scan_total_records: 2000
                  stream_records_deleted: 100
                  stream_records_inserted: 10000
                  stream_records_updated: 1000
                  scan_start_time: 2001-08-28T00:23:41Z
                  stream_last_update_processed_at: 2019-01-15T21:48:23Z
                  stream_last_delete_processed_at: 2019-01-15T21:48:23Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  stream_last_insert_processed_at: 2019-01-15T21:48:23Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              dynamodb:
                aws_region: us-east-2
                rcu: 1000
                table_name: dynamodb_table_name
                status:
                  scan_total_records: 2000
                  stream_last_processed_at: 2019-01-15T21:48:23Z
                  scan_start_time: 2001-08-28T00:23:41Z
                  scan_end_time: 2001-08-28T00:23:41Z
                  scan_records_processed: 1000
                  state: SCANNING_TABLE
              status:
                last_processed_item: /path/to/some/object
                last_error_at: 2019-01-15T21:48:23Z
                total_error_items: 32849023
                last_processed_at: 2019-01-15T21:48:23Z
                last_error_item: /path/to/some/object
                total_processed_items: 32849023
                state: INITIALIZING
                message: error 403 forbidden
                last_error_reason: invalid format .docx
                since: 2019-01-15T21:48:23Z
            created_at: 2001-08-28T00:23:41Z
            description: transactions from stores worldwide
            clustering_key:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            created_by: hello@rockset.com
            field_mappings:
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            - output_field:
                on_error: '[''SKIP'', ''FAIL'']'
                value:
                  sql: SHA256()
                field_name: zip_hash
              name: myTestMapping
              input_fields:
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              - is_drop: true
                if_missing: '[''SKIP'', ''PASS'']'
                param: zip
                field_name: address.city.zipcode
              is_drop_all_fields: true
            stats:
              doc_count: 2145
              inverted_index_size: 123456
              last_updated_ms: 1535101094433
              total_size: 123456
              purged_doc_count: 2145
              range_index_size: 123456
              purged_doc_size: 123456
              fill_progress: 0.6
              bytes_overwritten: 123456
              bytes_inserted: 123456
              total_index_size: 123456
              column_index_size: 123456
              last_queried_ms: 1535101119334
              row_index_size: 123456
            field_schemas:
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            - field_options:
                range_index_mode: v1_index
                index_mode: index
                type_index_mode: index
                column_index_mode: store
              field_name: address.city.zipcode
            retention_secs: 2592000
            name: global-transactions
            inverted_index_group_encoding_options:
              group_size: 0
              restart_length: 6
              doc_id_codec: doc_id_codec
              event_time_codec: event_time_codec
            fieldPartitions:
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            - keys: Values of a record to partition on. This is not needed if the
                partition type is AUTO
              type: AUTO
              field_name: address.city.zipcode
            status: READY
          gcs:
            gcp_service_account:
              service_account_key_file_json: service_account_key_file_json
          segment:
            connection_string: connection_string
          kafka:
            source_status_by_topic: topic-a:DORMANT
            kafka_topic_names:
            - kafka_topic_names
            - kafka_topic_names
            kafka_data_format: json
            connection_string: connection_string
          name: event-logs
          mongodb:
            connection_uri: mongodb+srv://<username>:<password>@server.example.com/
      properties:
        data:
          description: list of integration objects
          items:
            $ref: '#/components/schemas/Integration'
          type: array
      type: object
    ListIpAllowlistsResponse:
      example:
        data:
        - creator_email: xyz@rockset.com
          name: Office
          description: Office IP address
          created_at: 2001-08-28T00:23:41Z
          ip_address: 82.217.192.0/18
        - creator_email: xyz@rockset.com
          name: Office
          description: Office IP address
          created_at: 2001-08-28T00:23:41Z
          ip_address: 82.217.192.0/18
      properties:
        data:
          description: list of all IP Allowlist network policies
          items:
            $ref: '#/components/schemas/IpAllowlist'
          type: array
      type: object
    ListQueryLambdaTagsResponse:
      example:
        data:
        - tag_name: production
          version:
            workspace: commons
            collections:
            - collections
            - collections
            stats:
              last_executed_by: '...@rockset.com'
              last_execution_error_message: '[error message]'
              last_execution_error: 2001-08-28T00:23:41Z
              last_executed: 2001-08-28T00:23:41Z
            name: myQuery
            created_at: 2001-08-28T00:23:41Z
            description: production version foo
            state: ACTIVE
            created_by: ..@rockset.com
            version: acb99feg92bcaf
            sql:
              default_parameters:
              - name: _id
                type: string
                value: 85beb391
              - name: _id
                type: string
                value: 85beb391
              query: SELECT 'Foo'
        - tag_name: production
          version:
            workspace: commons
            collections:
            - collections
            - collections
            stats:
              last_executed_by: '...@rockset.com'
              last_execution_error_message: '[error message]'
              last_execution_error: 2001-08-28T00:23:41Z
              last_executed: 2001-08-28T00:23:41Z
            name: myQuery
            created_at: 2001-08-28T00:23:41Z
            description: production version foo
            state: ACTIVE
            created_by: ..@rockset.com
            version: acb99feg92bcaf
            sql:
              default_parameters:
              - name: _id
                type: string
                value: 85beb391
              - name: _id
                type: string
                value: 85beb391
              query: SELECT 'Foo'
      properties:
        data:
          description: list of all tags associated with a Query Lambda
          items:
            $ref: '#/components/schemas/QueryLambdaTag'
          type: array
      type: object
    ListQueryLambdaVersionsResponse:
      example:
        data:
        - workspace: commons
          collections:
          - collections
          - collections
          stats:
            last_executed_by: '...@rockset.com'
            last_execution_error_message: '[error message]'
            last_execution_error: 2001-08-28T00:23:41Z
            last_executed: 2001-08-28T00:23:41Z
          name: myQuery
          created_at: 2001-08-28T00:23:41Z
          description: production version foo
          state: ACTIVE
          created_by: ..@rockset.com
          version: acb99feg92bcaf
          sql:
            default_parameters:
            - name: _id
              type: string
              value: 85beb391
            - name: _id
              type: string
              value: 85beb391
            query: SELECT 'Foo'
        - workspace: commons
          collections:
          - collections
          - collections
          stats:
            last_executed_by: '...@rockset.com'
            last_execution_error_message: '[error message]'
            last_execution_error: 2001-08-28T00:23:41Z
            last_executed: 2001-08-28T00:23:41Z
          name: myQuery
          created_at: 2001-08-28T00:23:41Z
          description: production version foo
          state: ACTIVE
          created_by: ..@rockset.com
          version: acb99feg92bcaf
          sql:
            default_parameters:
            - name: _id
              type: string
              value: 85beb391
            - name: _id
              type: string
              value: 85beb391
            query: SELECT 'Foo'
      properties:
        data:
          description: list of all versions for a particular Query Lambda
          items:
            $ref: '#/components/schemas/QueryLambdaVersion'
          type: array
      type: object
    ListQueryLambdasResponse:
      example:
        data:
        - workspace: commons
          last_updated_by: ..@rockset.com
          last_updated: 2001-08-28T00:23:41Z
          latest_version:
            workspace: commons
            collections:
            - collections
            - collections
            stats:
              last_executed_by: '...@rockset.com'
              last_execution_error_message: '[error message]'
              last_execution_error: 2001-08-28T00:23:41Z
              last_executed: 2001-08-28T00:23:41Z
            name: myQuery
            created_at: 2001-08-28T00:23:41Z
            description: production version foo
            state: ACTIVE
            created_by: ..@rockset.com
            version: acb99feg92bcaf
            sql:
              default_parameters:
              - name: _id
                type: string
                value: 85beb391
              - name: _id
                type: string
                value: 85beb391
              query: SELECT 'Foo'
          collections:
          - collections
          - collections
          name: myQuery
          version_count: 1
        - workspace: commons
          last_updated_by: ..@rockset.com
          last_updated: 2001-08-28T00:23:41Z
          latest_version:
            workspace: commons
            collections:
            - collections
            - collections
            stats:
              last_executed_by: '...@rockset.com'
              last_execution_error_message: '[error message]'
              last_execution_error: 2001-08-28T00:23:41Z
              last_executed: 2001-08-28T00:23:41Z
            name: myQuery
            created_at: 2001-08-28T00:23:41Z
            description: production version foo
            state: ACTIVE
            created_by: ..@rockset.com
            version: acb99feg92bcaf
            sql:
              default_parameters:
              - name: _id
                type: string
                value: 85beb391
              - name: _id
                type: string
                value: 85beb391
              query: SELECT 'Foo'
          collections:
          - collections
          - collections
          name: myQuery
          version_count: 1
      properties:
        data:
          description: list of all Query Lambdas
          items:
            $ref: '#/components/schemas/QueryLambda'
          type: array
      type: object
    ListUsersResponse:
      example:
        data:
        - org: org
          roles: '["admin", "member", "read-only"]'
          created_at: 2001-08-28T00:23:41Z
          last_name: Doe
          invite_state: PENDING
          state: ACTIVE
          orgs:
          - deletionScheduledAt: deletionScheduledAt
            company_name: Rockset, Inc
            created_at: 2001-08-28T00:23:41Z
            external_id: <hash>
            id: rockset
            rockset_user: rockset_user
            state: TRIAL
            display_name: Rockset, Inc
            clusters:
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
          - deletionScheduledAt: deletionScheduledAt
            company_name: Rockset, Inc
            created_at: 2001-08-28T00:23:41Z
            external_id: <hash>
            id: rockset
            rockset_user: rockset_user
            state: TRIAL
            display_name: Rockset, Inc
            clusters:
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
          org_memberships:
          - expires_at: 2001-08-29T00:23:41Z
            organization:
              deletionScheduledAt: deletionScheduledAt
              company_name: Rockset, Inc
              created_at: 2001-08-28T00:23:41Z
              external_id: <hash>
              id: rockset
              rockset_user: rockset_user
              state: TRIAL
              display_name: Rockset, Inc
              clusters:
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
            roles:
            - roles
            - roles
            invite_state: PENDING
            created_at: 2001-08-28T00:23:41Z
            invited_by: invited_by
            email: email
          - expires_at: 2001-08-29T00:23:41Z
            organization:
              deletionScheduledAt: deletionScheduledAt
              company_name: Rockset, Inc
              created_at: 2001-08-28T00:23:41Z
              external_id: <hash>
              id: rockset
              rockset_user: rockset_user
              state: TRIAL
              display_name: Rockset, Inc
              clusters:
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
            roles:
            - roles
            - roles
            invite_state: PENDING
            created_at: 2001-08-28T00:23:41Z
            invited_by: invited_by
            email: email
          first_name: John
          email: hello@rockset.com
        - org: org
          roles: '["admin", "member", "read-only"]'
          created_at: 2001-08-28T00:23:41Z
          last_name: Doe
          invite_state: PENDING
          state: ACTIVE
          orgs:
          - deletionScheduledAt: deletionScheduledAt
            company_name: Rockset, Inc
            created_at: 2001-08-28T00:23:41Z
            external_id: <hash>
            id: rockset
            rockset_user: rockset_user
            state: TRIAL
            display_name: Rockset, Inc
            clusters:
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
          - deletionScheduledAt: deletionScheduledAt
            company_name: Rockset, Inc
            created_at: 2001-08-28T00:23:41Z
            external_id: <hash>
            id: rockset
            rockset_user: rockset_user
            state: TRIAL
            display_name: Rockset, Inc
            clusters:
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
          org_memberships:
          - expires_at: 2001-08-29T00:23:41Z
            organization:
              deletionScheduledAt: deletionScheduledAt
              company_name: Rockset, Inc
              created_at: 2001-08-28T00:23:41Z
              external_id: <hash>
              id: rockset
              rockset_user: rockset_user
              state: TRIAL
              display_name: Rockset, Inc
              clusters:
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
            roles:
            - roles
            - roles
            invite_state: PENDING
            created_at: 2001-08-28T00:23:41Z
            invited_by: invited_by
            email: email
          - expires_at: 2001-08-29T00:23:41Z
            organization:
              deletionScheduledAt: deletionScheduledAt
              company_name: Rockset, Inc
              created_at: 2001-08-28T00:23:41Z
              external_id: <hash>
              id: rockset
              rockset_user: rockset_user
              state: TRIAL
              display_name: Rockset, Inc
              clusters:
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
              - aws_region: us-west-2
                top_level_domain: .com
                domain: rockset
                apiserver_url: api.rockset.us-west-2.rockset.com
                id: asdf98-as9df8adf-adsf9asfd
                cluster_type: PRIVATE
            roles:
            - roles
            - roles
            invite_state: PENDING
            created_at: 2001-08-28T00:23:41Z
            invited_by: invited_by
            email: email
          first_name: John
          email: hello@rockset.com
      properties:
        data:
          description: list of users
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    ListVirtualInstancesResponse:
      example:
        data:
        - desired_type: FREE
          last_updated: 2001-08-28T00:23:41Z
          estimated_switch_duration_minutes: 20
          scaled_pod_count: 6
          monitoring_enabled: true
          desired_size: MEDIUM
          current_size: MEDIUM
          state: ACTIVE
          id: 123e4567-e89b-12d3-a456-556642440000
          current_type: FREE
          default_pod_count: 0
        - desired_type: FREE
          last_updated: 2001-08-28T00:23:41Z
          estimated_switch_duration_minutes: 20
          scaled_pod_count: 6
          monitoring_enabled: true
          desired_size: MEDIUM
          current_size: MEDIUM
          state: ACTIVE
          id: 123e4567-e89b-12d3-a456-556642440000
          current_type: FREE
          default_pod_count: 0
      properties:
        data:
          description: list of all virtual instances
          items:
            $ref: '#/components/schemas/VirtualInstance'
          type: array
      type: object
    ListWorkspacesResponse:
      example:
        data:
        - name: event_logs
          created_at: 2001-08-28T00:23:41Z
          description: Datasets of system logs for the ops team.
          collection_count: 3
          created_by: hello@rockset.com
        - name: event_logs
          created_at: 2001-08-28T00:23:41Z
          description: Datasets of system logs for the ops team.
          collection_count: 3
          created_by: hello@rockset.com
      properties:
        data:
          description: list of workspaces
          items:
            $ref: '#/components/schemas/Workspace'
          type: array
      type: object
    MongoDbIntegration:
      example:
        connection_uri: mongodb+srv://<username>:<password>@server.example.com/
      properties:
        connection_uri:
          description: MongoDB connection URI string
          example: mongodb+srv://<username>:<password>@server.example.com/
          type: string
      required:
      - connection_uri
      type: object
    OrgMembership:
      example:
        expires_at: 2001-08-29T00:23:41Z
        organization:
          deletionScheduledAt: deletionScheduledAt
          company_name: Rockset, Inc
          created_at: 2001-08-28T00:23:41Z
          external_id: <hash>
          id: rockset
          rockset_user: rockset_user
          state: TRIAL
          display_name: Rockset, Inc
          clusters:
          - aws_region: us-west-2
            top_level_domain: .com
            domain: rockset
            apiserver_url: api.rockset.us-west-2.rockset.com
            id: asdf98-as9df8adf-adsf9asfd
            cluster_type: PRIVATE
          - aws_region: us-west-2
            top_level_domain: .com
            domain: rockset
            apiserver_url: api.rockset.us-west-2.rockset.com
            id: asdf98-as9df8adf-adsf9asfd
            cluster_type: PRIVATE
        roles:
        - roles
        - roles
        invite_state: PENDING
        created_at: 2001-08-28T00:23:41Z
        invited_by: invited_by
        email: email
      properties:
        organization:
          $ref: '#/components/schemas/Organization'
        roles:
          items:
            type: string
          type: array
        invite_state:
          enum:
          - PENDING
          - ACCEPTED
          - EXPIRED
          - CANCELLED
          type: string
        invited_by:
          type: string
        email:
          description: email of the user
          type: string
        expires_at:
          description: ISO-8601 date
          example: 2001-08-29T00:23:41Z
          readOnly: true
          type: string
        created_at:
          description: ISO-8601 date
          example: 2001-08-28T00:23:41Z
          type: string
      required:
      - created_at
      - expires_at
      - invite_state
      - invited_by
      - organization
      - roles
      type: object
    Organization:
      description: An organization in Rockset is a container for users and collections.
      example:
        deletionScheduledAt: deletionScheduledAt
        company_name: Rockset, Inc
        created_at: 2001-08-28T00:23:41Z
        external_id: <hash>
        id: rockset
        rockset_user: rockset_user
        state: TRIAL
        display_name: Rockset, Inc
        clusters:
        - aws_region: us-west-2
          top_level_domain: .com
          domain: rockset
          apiserver_url: api.rockset.us-west-2.rockset.com
          id: asdf98-as9df8adf-adsf9asfd
          cluster_type: PRIVATE
        - aws_region: us-west-2
          top_level_domain: .com
          domain: rockset
          apiserver_url: api.rockset.us-west-2.rockset.com
          id: asdf98-as9df8adf-adsf9asfd
          cluster_type: PRIVATE
      properties:
        deletionScheduledAt:
          type: string
        id:
          description: unique identifier for the organization
          example: rockset
          type: string
        created_at:
          description: ISO-8601 date
          example: 2001-08-28T00:23:41Z
          type: string
        display_name:
          description: name of the organization
          example: Rockset, Inc
          type: string
        company_name:
          description: name of the company
          example: Rockset, Inc
          type: string
        external_id:
          description: organization's unique external ID within Rockset
          example: <hash>
          type: string
        rockset_user:
          type: string
        state:
          description: org state
          enum:
          - FREE
          - PAID
          - TRIAL
          - TRIAL_EXPIRED
          - TRIAL_DEPLETED
          - INACTIVE
          - DELETED
          example: TRIAL
          type: string
        clusters:
          items:
            $ref: '#/components/schemas/Cluster'
          type: array
      type: object
    OrganizationResponse:
      example:
        data:
          deletionScheduledAt: deletionScheduledAt
          company_name: Rockset, Inc
          created_at: 2001-08-28T00:23:41Z
          external_id: <hash>
          id: rockset
          rockset_user: rockset_user
          state: TRIAL
          display_name: Rockset, Inc
          clusters:
          - aws_region: us-west-2
            top_level_domain: .com
            domain: rockset
            apiserver_url: api.rockset.us-west-2.rockset.com
            id: asdf98-as9df8adf-adsf9asfd
            cluster_type: PRIVATE
          - aws_region: us-west-2
            top_level_domain: .com
            domain: rockset
            apiserver_url: api.rockset.us-west-2.rockset.com
            id: asdf98-as9df8adf-adsf9asfd
            cluster_type: PRIVATE
      properties:
        data:
          $ref: '#/components/schemas/Organization'
      type: object
    OutputField:
      example:
        on_error: '[''SKIP'', ''FAIL'']'
        value:
          sql: SHA256()
        field_name: zip_hash
      properties:
        field_name:
          description: 'The name of a field, parsed as a SQL qualified name '
          example: zip_hash
          type: string
        value:
          $ref: '#/components/schemas/SqlExpression'
        on_error:
          description: 'Error in Mapping execution: ''skip'' or ''fail'' '
          enum:
          - SKIP
          - FAIL
          example: '[''SKIP'', ''FAIL'']'
          type: string
      type: object
    PatchDocument:
      example:
        patch:
        - op: add
          path: /foo/bar
          from: from
          value: baz
        - op: add
          path: /foo/bar
          from: from
          value: baz
        _id: ca2d6832-1bfd-f88f-0620-d2aa27a5d86c
      properties:
        _id:
          description: Unique id of the document which is being patched
          example: ca2d6832-1bfd-f88f-0620-d2aa27a5d86c
          type: string
        patch:
          description: List of patch operations
          items:
            $ref: '#/components/schemas/PatchOperation'
          type: array
      required:
      - _id
      - patch
      type: object
    PatchDocumentsRequest:
      example:
        data:
        - patch:
          - op: add
            path: /foo/bar
            from: from
            value: baz
          - op: add
            path: /foo/bar
            from: from
            value: baz
          _id: ca2d6832-1bfd-f88f-0620-d2aa27a5d86c
        - patch:
          - op: add
            path: /foo/bar
            from: from
            value: baz
          - op: add
            path: /foo/bar
            from: from
            value: baz
          _id: ca2d6832-1bfd-f88f-0620-d2aa27a5d86c
      properties:
        data:
          description: List of JSON Patch Documents
          items:
            $ref: '#/components/schemas/PatchDocument'
          type: array
      required:
      - data
      type: object
    PatchDocumentsResponse:
      example:
        data:
        - patch_id: 486gsg8
          _collection: customers
          _id: 2cd61e3b
          error:
            trace_id: trace_id
            error_id: error_id
            line: 0
            column: 6
            message: collection not found
            type: InvalidInput
          status: ADDED
        - patch_id: 486gsg8
          _collection: customers
          _id: 2cd61e3b
          error:
            trace_id: trace_id
            error_id: error_id
            line: 0
            column: 6
            message: collection not found
            type: InvalidInput
          status: ADDED
      properties:
        data:
          items:
            $ref: '#/components/schemas/DocumentStatus'
          type: array
      required:
      - data
      type: object
    PatchOperation:
      example:
        op: add
        path: /foo/bar
        from: from
        value: baz
      properties:
        op:
          description: Operation to be performed in this patch
          enum:
          - ADD
          - REPLACE
          - REMOVE
          - COPY
          - MOVE
          - TEST
          - INCREMENT
          example: add
          type: string
        path:
          description: JSON-Pointer referencing a location in the target document
            where theoperation is performed
          example: /foo/bar
          type: string
        value:
          description: Value used in the patch operation. Required for add, replace,
            test, and increment operations
          example: baz
          properties: {}
          type: object
        from:
          description: JSON-Pointer referencing a location in the target document.Required
            for copy and move operations
          type: string
      required:
      - op
      - path
      type: object
    QueryError:
      example:
        status_code: 429
        type: ResourceExceeded
        message: Too many rows
      properties:
        type:
          description: The type of error
          example: ResourceExceeded
          type: string
        message:
          description: A message associated with the error, containing more information
            about it
          example: Too many rows
          type: string
        status_code:
          description: The HTTP status code associated with this error, had it been
            sent as the response status code
          example: 429
          format: int32
          type: integer
      type: object
    QueryFieldType:
      example:
        name: _id
        type: string
      properties:
        name:
          description: name of the field
          example: _id
          type: string
        type:
          description: data type of the field
          example: string
          type: string
      required:
      - name
      - type
      type: object
    QueryLambda:
      example:
        workspace: commons
        last_updated_by: ..@rockset.com
        last_updated: 2001-08-28T00:23:41Z
        latest_version:
          workspace: commons
          collections:
          - collections
          - collections
          stats:
            last_executed_by: '...@rockset.com'
            last_execution_error_message: '[error message]'
            last_execution_error: 2001-08-28T00:23:41Z
            last_executed: 2001-08-28T00:23:41Z
          name: myQuery
          created_at: 2001-08-28T00:23:41Z
          description: production version foo
          state: ACTIVE
          created_by: ..@rockset.com
          version: acb99feg92bcaf
          sql:
            default_parameters:
            - name: _id
              type: string
              value: 85beb391
            - name: _id
              type: string
              value: 85beb391
            query: SELECT 'Foo'
        collections:
        - collections
        - collections
        name: myQuery
        version_count: 1
      properties:
        workspace:
          description: workspace of this Query Lambda
          example: commons
          type: string
        last_updated_by:
          description: user that created this Query Lambda
          example: ..@rockset.com
          type: string
        last_updated:
          description: ISO-8601 date of when Query Lambda was last updated
          example: 2001-08-28T00:23:41Z
          type: string
        name:
          description: Query Lambda name
          example: myQuery
          type: string
        version_count:
          description: number of Query Lambda versions
          example: 1
          format: int32
          type: integer
        collections:
          description: collections/aliases queried by underlying SQL query
          items:
            type: string
          type: array
        latest_version:
          $ref: '#/components/schemas/QueryLambdaVersion'
      type: object
    QueryLambdaSql:
      example:
        default_parameters:
        - name: _id
          type: string
          value: 85beb391
        - name: _id
          type: string
          value: 85beb391
        query: SELECT 'Foo'
      properties:
        query:
          description: SQL text
          example: SELECT 'Foo'
          type: string
        default_parameters:
          description: default parameters for this Query Lambda
          items:
            $ref: '#/components/schemas/QueryParameter'
          type: array
      required:
      - query
      type: object
    QueryLambdaStats:
      example:
        last_executed_by: '...@rockset.com'
        last_execution_error_message: '[error message]'
        last_execution_error: 2001-08-28T00:23:41Z
        last_executed: 2001-08-28T00:23:41Z
      properties:
        last_executed:
          description: ISO-8601 date
          example: 2001-08-28T00:23:41Z
          type: string
        last_executed_by:
          description: user who last executed Query Lambda
          example: '...@rockset.com'
          type: string
        last_execution_error:
          description: ISO-8601 date of last execution failure
          example: 2001-08-28T00:23:41Z
          type: string
        last_execution_error_message:
          description: error message associated with last failed execution
          example: '[error message]'
          type: string
      type: object
    QueryLambdaTag:
      example:
        tag_name: production
        version:
          workspace: commons
          collections:
          - collections
          - collections
          stats:
            last_executed_by: '...@rockset.com'
            last_execution_error_message: '[error message]'
            last_execution_error: 2001-08-28T00:23:41Z
            last_executed: 2001-08-28T00:23:41Z
          name: myQuery
          created_at: 2001-08-28T00:23:41Z
          description: production version foo
          state: ACTIVE
          created_by: ..@rockset.com
          version: acb99feg92bcaf
          sql:
            default_parameters:
            - name: _id
              type: string
              value: 85beb391
            - name: _id
              type: string
              value: 85beb391
            query: SELECT 'Foo'
      properties:
        tag_name:
          description: name of Query Lambda tag
          example: production
          type: string
        version:
          $ref: '#/components/schemas/QueryLambdaVersion'
      type: object
    QueryLambdaTagResponse:
      example:
        data:
          tag_name: production
          version:
            workspace: commons
            collections:
            - collections
            - collections
            stats:
              last_executed_by: '...@rockset.com'
              last_execution_error_message: '[error message]'
              last_execution_error: 2001-08-28T00:23:41Z
              last_executed: 2001-08-28T00:23:41Z
            name: myQuery
            created_at: 2001-08-28T00:23:41Z
            description: production version foo
            state: ACTIVE
            created_by: ..@rockset.com
            version: acb99feg92bcaf
            sql:
              default_parameters:
              - name: _id
                type: string
                value: 85beb391
              - name: _id
                type: string
                value: 85beb391
              query: SELECT 'Foo'
      properties:
        data:
          $ref: '#/components/schemas/QueryLambdaTag'
      type: object
    QueryLambdaVersion:
      example:
        workspace: commons
        collections:
        - collections
        - collections
        stats:
          last_executed_by: '...@rockset.com'
          last_execution_error_message: '[error message]'
          last_execution_error: 2001-08-28T00:23:41Z
          last_executed: 2001-08-28T00:23:41Z
        name: myQuery
        created_at: 2001-08-28T00:23:41Z
        description: production version foo
        state: ACTIVE
        created_by: ..@rockset.com
        version: acb99feg92bcaf
        sql:
          default_parameters:
          - name: _id
            type: string
            value: 85beb391
          - name: _id
            type: string
            value: 85beb391
          query: SELECT 'Foo'
      properties:
        workspace:
          description: workspace of this Query Lambda
          example: commons
          type: string
        created_by:
          description: user that created this Query Lambda
          example: ..@rockset.com
          type: string
        created_at:
          description: ISO-8601 date of when Query Lambda was created
          example: 2001-08-28T00:23:41Z
          type: string
        name:
          description: Query Lambda name
          example: myQuery
          type: string
        version:
          description: Query Lambda version
          example: acb99feg92bcaf
          type: string
        description:
          description: optional description
          example: production version foo
          type: string
        sql:
          $ref: '#/components/schemas/QueryLambdaSql'
        collections:
          description: collections queried by underlying SQL query
          items:
            type: string
          type: array
        state:
          description: status of this Query Lambda
          enum:
          - ACTIVE
          - INVALID_SQL
          example: ACTIVE
          type: string
        stats:
          $ref: '#/components/schemas/QueryLambdaStats'
      type: object
    QueryLambdaVersionResponse:
      example:
        data:
          workspace: commons
          collections:
          - collections
          - collections
          stats:
            last_executed_by: '...@rockset.com'
            last_execution_error_message: '[error message]'
            last_execution_error: 2001-08-28T00:23:41Z
            last_executed: 2001-08-28T00:23:41Z
          name: myQuery
          created_at: 2001-08-28T00:23:41Z
          description: production version foo
          state: ACTIVE
          created_by: ..@rockset.com
          version: acb99feg92bcaf
          sql:
            default_parameters:
            - name: _id
              type: string
              value: 85beb391
            - name: _id
              type: string
              value: 85beb391
            query: SELECT 'Foo'
      properties:
        data:
          $ref: '#/components/schemas/QueryLambdaVersion'
      type: object
    QueryParameter:
      example:
        name: _id
        type: string
        value: 85beb391
      properties:
        name:
          description: name of the field
          example: _id
          type: string
        type:
          description: data type of the field
          example: string
          type: string
        value:
          description: literal value of the field
          example: 85beb391
          type: string
      required:
      - name
      - type
      - value
      type: object
    QueryRequest:
      example:
        sql:
          profiling_enabled: true
          generate_warnings: true
          query: SELECT * FROM foo where _id = :_id
          default_row_limit: 0
          parameters:
          - name: _id
            type: string
            value: 85beb391
          - name: _id
            type: string
            value: 85beb391
      properties:
        sql:
          $ref: '#/components/schemas/QueryRequestSql'
      type: object
    QueryRequestSql:
      example:
        profiling_enabled: true
        generate_warnings: true
        query: SELECT * FROM foo where _id = :_id
        default_row_limit: 0
        parameters:
        - name: _id
          type: string
          value: 85beb391
        - name: _id
          type: string
          value: 85beb391
      properties:
        parameters:
          description: list of named parameters
          items:
            $ref: '#/components/schemas/QueryParameter'
          type: array
        query:
          description: SQL query as a string
          example: SELECT * FROM foo where _id = :_id
          type: string
        default_row_limit:
          description: Row limit to use if no limit specified in the query
          format: int32
          type: integer
        generate_warnings:
          description: Whether to generate warnings
          type: boolean
        profiling_enabled:
          description: Whether to generate a performance profile for this query
          type: boolean
      required:
      - query
      type: object
    QueryResponse:
      example:
        query_id: query_id
        query_errors:
        - status_code: 429
          type: ResourceExceeded
          message: Too many rows
        - status_code: 429
          type: ResourceExceeded
          message: Too many rows
        collections:
        - collections
        - collections
        stats:
          throttled_time_micros: 126
          elapsed_time_ms: 126
        warnings:
        - warnings
        - warnings
        column_fields:
        - name: _id
          type: string
        - name: _id
          type: string
        results:
        - '{}'
        - '{}'
      properties:
        query_id:
          description: unique id for this query
          type: string
        collections:
          description: list of collections queried by the query
          items:
            type: string
          type: array
        results:
          description: list of objects returned by the query
          items:
            properties: {}
            type: object
          type: array
        stats:
          $ref: '#/components/schemas/QueryResponseStats'
        warnings:
          description: warnings received from the query
          items:
            type: string
          type: array
        query_errors:
          description: errors encountered while streaming the query
          items:
            $ref: '#/components/schemas/QueryError'
          type: array
        column_fields:
          description: meta information about each column in the result set
          items:
            $ref: '#/components/schemas/QueryFieldType'
          type: array
      type: object
    QueryResponseStats:
      example:
        throttled_time_micros: 126
        elapsed_time_ms: 126
      properties:
        elapsed_time_ms:
          description: query time in milliseconds
          example: 126
          format: int64
          type: integer
        throttled_time_micros:
          description: time query was throttled by admission control
          example: 126
          format: int64
          type: integer
      type: object
    RedshiftIntegration:
      example:
        password: pswd....
        port: 5439
        aws_access_key:
          aws_access_key_id: AKIAIOSFODNN7EXAMPLE
          aws_secret_access_key: wJal....
        host: test.yuyugt.us-west-2.redshift.amazonaws.com
        s3_bucket_path: s3://redshift-unload
        username: awsuser
      properties:
        aws_access_key:
          $ref: '#/components/schemas/AwsAccessKey'
        username:
          description: Username associated with Redshift cluster
          example: awsuser
          type: string
        password:
          description: Password associated with Redshift cluster
          example: pswd....
          type: string
        host:
          description: Redshift Cluster host
          example: test.yuyugt.us-west-2.redshift.amazonaws.com
          type: string
        port:
          description: Redshift Cluster port
          example: 5439
          format: int32
          type: integer
        s3_bucket_path:
          description: unload S3 bucket path
          example: s3://redshift-unload
          type: string
      required:
      - host
      - password
      - port
      - s3_bucket_path
      - username
      type: object
    S3Integration:
      example:
        aws_access_key:
          aws_access_key_id: AKIAIOSFODNN7EXAMPLE
          aws_secret_access_key: wJal....
        aws_role:
          aws_role_arn: arn:aws:iam::2378964092:role/rockset-role
      properties:
        aws_access_key:
          $ref: '#/components/schemas/AwsAccessKey'
        aws_role:
          $ref: '#/components/schemas/AwsRole'
      type: object
    SegmentIntegration:
      example:
        connection_string: connection_string
      properties:
        connection_string:
          description: segment connection string
          readOnly: true
          type: string
      type: object
    Source:
      description: 'Details about the data source for the given collection. Only one
        of the following fields are allowed to be defined. Only collections can act
        as data sources for views. '
      example:
        integration_name: aws-integration
        s3:
          bucket: s3://customer-account-info
          prefixes: '[''/transactions'', ''/stores'']'
          mappings:
          - input_path:
            - input_path
            - input_path
            mask:
              args: '{}'
              name: name
          - input_path:
            - input_path
            - input_path
            mask:
              args: '{}'
              name: name
          secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
          prefix: prefix/to/keys
          access_key: AKIAIOSFODNN7EXAMPLE
          pattern: prefix/to/**/keys/*.format
          format: none
          region: us-west-2
        redshift:
          schema: common
          incremental_field: updated_at
          database: dev
          table_name: redshift_table_name
        gcs:
          bucket: server-logs
          prefix: prefix/to/keys
        kafka:
          kafka_topic_name: example-topic
          status:
            num_documents_processed: 1337
            last_consumed_time: 2001-08-28T00:23:41Z
            state: ACTIVE
        format_params:
          xml:
            attribute_prefix: _attr
            doc_tag: row
            encoding: UTF-8
            value_tag: value
            root_tag: root
          csv:
            quoteChar: '"'
            escapeChar: \
            columnNames: '[c1, c2, c3]'
            columnTypes: '[''BOOLEAN'', ''INTEGER'', ''FLOAT'', ''STRING'']'
            firstLineAsColumnNames: true
            encoding: UTF-8
            separator: ','
          json: true
        file_upload:
          file_name: file1.json
          file_size: 12345
          file_upload_time: 2019-01-15T21:48:23Z
        kinesis:
          stream_name: click_stream
          aws_region: us-east-2
        mongodb:
          database_name: my_database
          collection_name: my_collection
          status:
            scan_total_records: 2000
            stream_records_deleted: 100
            stream_records_inserted: 10000
            stream_records_updated: 1000
            scan_start_time: 2001-08-28T00:23:41Z
            stream_last_update_processed_at: 2019-01-15T21:48:23Z
            stream_last_delete_processed_at: 2019-01-15T21:48:23Z
            scan_end_time: 2001-08-28T00:23:41Z
            stream_last_insert_processed_at: 2019-01-15T21:48:23Z
            scan_records_processed: 1000
            state: SCANNING_TABLE
        dynamodb:
          aws_region: us-east-2
          rcu: 1000
          table_name: dynamodb_table_name
          status:
            scan_total_records: 2000
            stream_last_processed_at: 2019-01-15T21:48:23Z
            scan_start_time: 2001-08-28T00:23:41Z
            scan_end_time: 2001-08-28T00:23:41Z
            scan_records_processed: 1000
            state: SCANNING_TABLE
        status:
          last_processed_item: /path/to/some/object
          last_error_at: 2019-01-15T21:48:23Z
          total_error_items: 32849023
          last_processed_at: 2019-01-15T21:48:23Z
          last_error_item: /path/to/some/object
          total_processed_items: 32849023
          state: INITIALIZING
          message: error 403 forbidden
          last_error_reason: invalid format .docx
          since: 2019-01-15T21:48:23Z
      properties:
        integration_name:
          description: name of integration to use
          example: aws-integration
          type: string
        s3:
          $ref: '#/components/schemas/SourceS3'
        kinesis:
          $ref: '#/components/schemas/SourceKinesis'
        gcs:
          $ref: '#/components/schemas/SourceGcs'
        redshift:
          $ref: '#/components/schemas/SourceRedshift'
        dynamodb:
          $ref: '#/components/schemas/SourceDynamoDb'
        file_upload:
          $ref: '#/components/schemas/SourceFileUpload'
        kafka:
          $ref: '#/components/schemas/SourceKafka'
        mongodb:
          $ref: '#/components/schemas/SourceMongoDb'
        status:
          $ref: '#/components/schemas/Status'
        format_params:
          $ref: '#/components/schemas/FormatParams'
      required:
      - integration_name
      type: object
    SourceDynamoDb:
      example:
        aws_region: us-east-2
        rcu: 1000
        table_name: dynamodb_table_name
        status:
          scan_total_records: 2000
          stream_last_processed_at: 2019-01-15T21:48:23Z
          scan_start_time: 2001-08-28T00:23:41Z
          scan_end_time: 2001-08-28T00:23:41Z
          scan_records_processed: 1000
          state: SCANNING_TABLE
      properties:
        aws_region:
          description: AWS region name of DynamoDB table, by default us-west-2 is
            used
          example: us-east-2
          type: string
        table_name:
          description: name of DynamoDB table containing data
          example: dynamodb_table_name
          type: string
        status:
          $ref: '#/components/schemas/StatusDynamoDb'
        rcu:
          description: Max RCU usage for scan
          example: 1000
          format: int64
          type: integer
      required:
      - table_name
      type: object
    SourceFileUpload:
      example:
        file_name: file1.json
        file_size: 12345
        file_upload_time: 2019-01-15T21:48:23Z
      properties:
        file_name:
          description: name of the file
          example: file1.json
          type: string
        file_size:
          description: size of the file in bytes
          example: 12345
          format: int64
          type: integer
        file_upload_time:
          description: time of file upload
          example: 2019-01-15T21:48:23Z
          type: string
      required:
      - file_name
      - file_size
      - file_upload_time
      type: object
    SourceGcs:
      example:
        bucket: server-logs
        prefix: prefix/to/keys
      properties:
        bucket:
          description: name of GCS bucket you want to ingest from
          example: server-logs
          type: string
        prefix:
          description: Prefix that selects keys to ingest.
          example: prefix/to/keys
          type: string
      type: object
    SourceKafka:
      example:
        kafka_topic_name: example-topic
        status:
          num_documents_processed: 1337
          last_consumed_time: 2001-08-28T00:23:41Z
          state: ACTIVE
      properties:
        kafka_topic_name:
          description: The Kafka topic to be tailed
          example: example-topic
          type: string
        status:
          $ref: '#/components/schemas/StatusKafka'
      required:
      - kafka_topic_name
      type: object
    SourceKinesis:
      example:
        stream_name: click_stream
        aws_region: us-east-2
      properties:
        stream_name:
          description: name of kinesis stream
          example: click_stream
          type: string
        aws_region:
          description: AWS region name of Kinesis stream, by default us-west-2 is
            used
          example: us-east-2
          type: string
      required:
      - stream_name
      type: object
    SourceMongoDb:
      example:
        database_name: my_database
        collection_name: my_collection
        status:
          scan_total_records: 2000
          stream_records_deleted: 100
          stream_records_inserted: 10000
          stream_records_updated: 1000
          scan_start_time: 2001-08-28T00:23:41Z
          stream_last_update_processed_at: 2019-01-15T21:48:23Z
          stream_last_delete_processed_at: 2019-01-15T21:48:23Z
          scan_end_time: 2001-08-28T00:23:41Z
          stream_last_insert_processed_at: 2019-01-15T21:48:23Z
          scan_records_processed: 1000
          state: SCANNING_TABLE
      properties:
        database_name:
          description: MongoDB database name containing this collection
          example: my_database
          type: string
        collection_name:
          description: MongoDB collection name
          example: my_collection
          type: string
        status:
          $ref: '#/components/schemas/StatusMongoDb'
      required:
      - collection_name
      - database_name
      type: object
    SourceRedshift:
      example:
        schema: common
        incremental_field: updated_at
        database: dev
        table_name: redshift_table_name
      properties:
        database:
          description: name of the database in Redshift Cluster
          example: dev
          type: string
        schema:
          description: schema which contains the Redshift table
          example: common
          type: string
        table_name:
          description: name of Redshift table containing data
          example: redshift_table_name
          type: string
        incremental_field:
          description: field in Redshift source table to monitor for updates
          example: updated_at
          type: string
      required:
      - database
      - schema
      - table_name
      type: object
    SourceS3:
      example:
        bucket: s3://customer-account-info
        prefixes: '[''/transactions'', ''/stores'']'
        mappings:
        - input_path:
          - input_path
          - input_path
          mask:
            args: '{}'
            name: name
        - input_path:
          - input_path
          - input_path
          mask:
            args: '{}'
            name: name
        secret_access: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
        prefix: prefix/to/keys
        access_key: AKIAIOSFODNN7EXAMPLE
        pattern: prefix/to/**/keys/*.format
        format: none
        region: us-west-2
      properties:
        access_key:
          description: AWS credential with ListObjects and GetObject access
          example: AKIAIOSFODNN7EXAMPLE
          readOnly: true
          type: string
        secret_access:
          description: AWS credential with ListObjects and GetObject access
          example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
          readOnly: true
          type: string
        prefix:
          description: Prefix that selects keys to ingest.
          example: prefix/to/keys
          type: string
        pattern:
          description: Pattern that selects keys to ingest.
          example: prefix/to/**/keys/*.format
          type: string
        region:
          description: AWS region containing source bucket
          example: us-west-2
          type: string
        bucket:
          description: address of S3 bucket containing data
          example: s3://customer-account-info
          type: string
        prefixes:
          description: list of prefixes to paths from which data should be ingested
          example: '[''/transactions'', ''/stores'']'
          items:
            type: string
          readOnly: true
          type: array
        format:
          description: do not use
          enum:
          - JSON
          example: none
          type: string
        mappings:
          description: custom transformation on data field
          items:
            $ref: '#/components/schemas/FieldMask'
          type: array
      required:
      - bucket
      - prefixes
      type: object
    SqlExpression:
      example:
        sql: SHA256()
      properties:
        sql:
          description: The name of a sql function
          example: SHA256()
          type: string
      type: object
    Status:
      example:
        last_processed_item: /path/to/some/object
        last_error_at: 2019-01-15T21:48:23Z
        total_error_items: 32849023
        last_processed_at: 2019-01-15T21:48:23Z
        last_error_item: /path/to/some/object
        total_processed_items: 32849023
        state: INITIALIZING
        message: error 403 forbidden
        last_error_reason: invalid format .docx
        since: 2019-01-15T21:48:23Z
      properties:
        state:
          description: 'Status of the Source''s ingestion, one of: INITIALIZING, WATCHING,
            PROCESSING, COMPLETED, ERROR'
          enum:
          - INITIALIZING
          - WATCHING
          - PROCESSING
          - COMPLETED
          - ERROR
          example: INITIALIZING
          type: string
        since:
          description: ISO-8601 date when state was triggered
          example: 2019-01-15T21:48:23Z
          type: string
        message:
          description: state message
          example: error 403 forbidden
          type: string
        last_processed_at:
          description: ISO-8601 date when source was last processed
          example: 2019-01-15T21:48:23Z
          type: string
        last_processed_item:
          description: last source item processed by ingester
          example: /path/to/some/object
          type: string
        total_processed_items:
          description: Total items processed of source
          example: 32849023
          format: int64
          type: integer
        last_error_at:
          description: ISO-8601 date when last error occurred
          example: 2019-01-15T21:48:23Z
          type: string
        last_error_item:
          description: last source item that errored
          example: /path/to/some/object
          type: string
        last_error_reason:
          description: reason for the last error
          example: invalid format .docx
          type: string
        total_error_items:
          description: Total items that errored
          example: 32849023
          format: int64
          type: integer
      type: object
    StatusDynamoDb:
      example:
        scan_total_records: 2000
        stream_last_processed_at: 2019-01-15T21:48:23Z
        scan_start_time: 2001-08-28T00:23:41Z
        scan_end_time: 2001-08-28T00:23:41Z
        scan_records_processed: 1000
        state: SCANNING_TABLE
      properties:
        scan_start_time:
          description: DynamoDB scan start time
          example: 2001-08-28T00:23:41Z
          type: string
        scan_end_time:
          description: DynamoDb scan end time
          example: 2001-08-28T00:23:41Z
          type: string
        scan_records_processed:
          description: Number of records inserted using scan
          example: 1000
          format: int64
          type: integer
        scan_total_records:
          description: Number of records in DynamoDB table at time of scan
          example: 2000
          format: int64
          type: integer
        state:
          description: state of current ingest for this table
          enum:
          - INITIALIZING
          - SCANNING_TABLE
          - PROCESSING_STREAM
          example: SCANNING_TABLE
          type: string
        stream_last_processed_at:
          description: ISO-8601 date when source was last processed
          example: 2019-01-15T21:48:23Z
          type: string
      type: object
    StatusKafka:
      example:
        num_documents_processed: 1337
        last_consumed_time: 2001-08-28T00:23:41Z
        state: ACTIVE
      properties:
        state:
          description: State of the Kafka source
          enum:
          - NO_DOCS_YET
          - ACTIVE
          - DORMANT
          example: ACTIVE
          type: string
        last_consumed_time:
          description: Time at which the last document was consumed from Kafka
          example: 2001-08-28T00:23:41Z
          type: string
        num_documents_processed:
          description: Number of documents consumed by this Kafka topic
          example: 1337
          format: int64
          type: integer
      type: object
    StatusKafkaPartition:
      properties:
        partition_number:
          description: The number of this partition
          example: 123
          format: int32
          type: integer
        num_documents_processed:
          description: Number of documents consumed by this partition
          example: 1337
          format: int64
          type: integer
      type: object
    StatusMongoDb:
      example:
        scan_total_records: 2000
        stream_records_deleted: 100
        stream_records_inserted: 10000
        stream_records_updated: 1000
        scan_start_time: 2001-08-28T00:23:41Z
        stream_last_update_processed_at: 2019-01-15T21:48:23Z
        stream_last_delete_processed_at: 2019-01-15T21:48:23Z
        scan_end_time: 2001-08-28T00:23:41Z
        stream_last_insert_processed_at: 2019-01-15T21:48:23Z
        scan_records_processed: 1000
        state: SCANNING_TABLE
      properties:
        scan_start_time:
          description: MongoDB scan start time
          example: 2001-08-28T00:23:41Z
          type: string
        scan_end_time:
          description: MongoDB scan end time
          example: 2001-08-28T00:23:41Z
          type: string
        scan_records_processed:
          description: Number of records inserted using scan
          example: 1000
          format: int64
          type: integer
        scan_total_records:
          description: Number of records in MongoDB table at time of scan
          example: 2000
          format: int64
          type: integer
        state:
          description: state of current ingest for this table
          enum:
          - INITIALIZING
          - SCANNING_TABLE
          - PROCESSING_STREAM
          example: SCANNING_TABLE
          type: string
        stream_last_insert_processed_at:
          description: ISO-8601 date when new insert from source was last processed
          example: 2019-01-15T21:48:23Z
          type: string
        stream_last_update_processed_at:
          description: ISO-8601 date when update from source was last processed
          example: 2019-01-15T21:48:23Z
          type: string
        stream_last_delete_processed_at:
          description: ISO-8601 date when delete from source was last processed
          example: 2019-01-15T21:48:23Z
          type: string
        stream_records_inserted:
          description: Number of new records inserted using stream
          example: 10000
          format: int64
          type: integer
        stream_records_updated:
          description: Number of new records updated using stream
          example: 1000
          format: int64
          type: integer
        stream_records_deleted:
          description: Number of new records deleted using stream
          example: 100
          format: int64
          type: integer
      type: object
    UpdateAliasRequest:
      example:
        collections: '[common.foo, prod.demo]'
        description: version alias
      properties:
        description:
          description: optional description
          example: version alias
          type: string
        collections:
          description: list of fully qualified collection names referenced by alias
          example: '[common.foo, prod.demo]'
          items:
            type: string
          type: array
      required:
      - collections
      type: object
    UpdateQueryLambdaRequest:
      example:
        description: production version foo
        sql:
          default_parameters:
          - name: _id
            type: string
            value: 85beb391
          - name: _id
            type: string
            value: 85beb391
          query: SELECT 'Foo'
      properties:
        description:
          description: optional description
          example: production version foo
          type: string
        sql:
          $ref: '#/components/schemas/QueryLambdaSql'
      type: object
    UpdateVirtualInstanceRequest:
      example:
        new_type: FREE
        monitoring_enabled: true
        new_size: LARGE
      properties:
        new_size:
          description: requested virtual instance size
          enum:
          - FREE
          - SHARED
          - SMALL
          - MEDIUM
          - LARGE
          - XLARGE
          - XLARGE2
          - XLARGE4
          - XLARGE8
          - XLARGE16
          example: LARGE
          type: string
        new_type:
          enum:
          - FREE
          - SHARED
          - SMALL
          - MEDIUM
          - LARGE
          - XLARGE
          - XLARGE2
          - XLARGE4
          - XLARGE8
          - XLARGE16
          type: string
        monitoring_enabled:
          type: boolean
      type: object
    UpdateVirtualInstanceResponse:
      example:
        data:
          desired_type: FREE
          last_updated: 2001-08-28T00:23:41Z
          estimated_switch_duration_minutes: 20
          scaled_pod_count: 6
          monitoring_enabled: true
          desired_size: MEDIUM
          current_size: MEDIUM
          state: ACTIVE
          id: 123e4567-e89b-12d3-a456-556642440000
          current_type: FREE
          default_pod_count: 0
      properties:
        data:
          $ref: '#/components/schemas/VirtualInstance'
      type: object
    User:
      example:
        org: org
        roles: '["admin", "member", "read-only"]'
        created_at: 2001-08-28T00:23:41Z
        last_name: Doe
        invite_state: PENDING
        state: ACTIVE
        orgs:
        - deletionScheduledAt: deletionScheduledAt
          company_name: Rockset, Inc
          created_at: 2001-08-28T00:23:41Z
          external_id: <hash>
          id: rockset
          rockset_user: rockset_user
          state: TRIAL
          display_name: Rockset, Inc
          clusters:
          - aws_region: us-west-2
            top_level_domain: .com
            domain: rockset
            apiserver_url: api.rockset.us-west-2.rockset.com
            id: asdf98-as9df8adf-adsf9asfd
            cluster_type: PRIVATE
          - aws_region: us-west-2
            top_level_domain: .com
            domain: rockset
            apiserver_url: api.rockset.us-west-2.rockset.com
            id: asdf98-as9df8adf-adsf9asfd
            cluster_type: PRIVATE
        - deletionScheduledAt: deletionScheduledAt
          company_name: Rockset, Inc
          created_at: 2001-08-28T00:23:41Z
          external_id: <hash>
          id: rockset
          rockset_user: rockset_user
          state: TRIAL
          display_name: Rockset, Inc
          clusters:
          - aws_region: us-west-2
            top_level_domain: .com
            domain: rockset
            apiserver_url: api.rockset.us-west-2.rockset.com
            id: asdf98-as9df8adf-adsf9asfd
            cluster_type: PRIVATE
          - aws_region: us-west-2
            top_level_domain: .com
            domain: rockset
            apiserver_url: api.rockset.us-west-2.rockset.com
            id: asdf98-as9df8adf-adsf9asfd
            cluster_type: PRIVATE
        org_memberships:
        - expires_at: 2001-08-29T00:23:41Z
          organization:
            deletionScheduledAt: deletionScheduledAt
            company_name: Rockset, Inc
            created_at: 2001-08-28T00:23:41Z
            external_id: <hash>
            id: rockset
            rockset_user: rockset_user
            state: TRIAL
            display_name: Rockset, Inc
            clusters:
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
          roles:
          - roles
          - roles
          invite_state: PENDING
          created_at: 2001-08-28T00:23:41Z
          invited_by: invited_by
          email: email
        - expires_at: 2001-08-29T00:23:41Z
          organization:
            deletionScheduledAt: deletionScheduledAt
            company_name: Rockset, Inc
            created_at: 2001-08-28T00:23:41Z
            external_id: <hash>
            id: rockset
            rockset_user: rockset_user
            state: TRIAL
            display_name: Rockset, Inc
            clusters:
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
            - aws_region: us-west-2
              top_level_domain: .com
              domain: rockset
              apiserver_url: api.rockset.us-west-2.rockset.com
              id: asdf98-as9df8adf-adsf9asfd
              cluster_type: PRIVATE
          roles:
          - roles
          - roles
          invite_state: PENDING
          created_at: 2001-08-28T00:23:41Z
          invited_by: invited_by
          email: email
        first_name: John
        email: hello@rockset.com
      properties:
        created_at:
          description: ISO-8601 date
          example: 2001-08-28T00:23:41Z
          type: string
        email:
          description: user email
          example: hello@rockset.com
          type: string
        first_name:
          description: user first name
          example: John
          type: string
        last_name:
          description: user last name
          example: Doe
          type: string
        roles:
          description: List of roles for a given user
          example: '["admin", "member", "read-only"]'
          items:
            type: string
          type: array
        state:
          description: state of user - NEW / ACTIVE
          example: ACTIVE
          type: string
        org:
          type: string
        invite_state:
          enum:
          - PENDING
          - ACCEPTED
          - EXPIRED
          - CANCELLED
          type: string
        orgs:
          items:
            $ref: '#/components/schemas/Organization'
          type: array
        org_memberships:
          items:
            $ref: '#/components/schemas/OrgMembership'
          type: array
      required:
      - email
      type: object
    ValidateQueryResponse:
      example:
        collections: '[''commons.foo'']'
        name: '[''commons.foo'']'
        parameters: '[''foo'']'
      properties:
        name:
          description: list of collection specified in query
          example: '[''commons.foo'']'
          items:
            type: string
          type: array
        collections:
          description: list of collection specified in query
          example: '[''commons.foo'']'
          items:
            type: string
          type: array
        parameters:
          description: list of parameters specified in query
          example: '[''foo'']'
          items:
            type: string
          type: array
      required:
      - collections
      - name
      - parameters
      type: object
    VirtualInstance:
      example:
        desired_type: FREE
        last_updated: 2001-08-28T00:23:41Z
        estimated_switch_duration_minutes: 20
        scaled_pod_count: 6
        monitoring_enabled: true
        desired_size: MEDIUM
        current_size: MEDIUM
        state: ACTIVE
        id: 123e4567-e89b-12d3-a456-556642440000
        current_type: FREE
        default_pod_count: 0
      properties:
        state:
          description: virtual instance state
          enum:
          - PROVISIONING_RESOURCES
          - REBALANCING_COLLECTIONS
          - ACTIVE
          - DELETED
          example: ACTIVE
          type: string
        current_type:
          enum:
          - FREE
          - SHARED
          - SMALL
          - MEDIUM
          - LARGE
          - XLARGE
          - XLARGE2
          - XLARGE4
          - XLARGE8
          - XLARGE16
          type: string
        desired_type:
          enum:
          - FREE
          - SHARED
          - SMALL
          - MEDIUM
          - LARGE
          - XLARGE
          - XLARGE2
          - XLARGE4
          - XLARGE8
          - XLARGE16
          type: string
        current_size:
          description: virtual instance current size
          enum:
          - FREE
          - SHARED
          - SMALL
          - MEDIUM
          - LARGE
          - XLARGE
          - XLARGE2
          - XLARGE4
          - XLARGE8
          - XLARGE16
          example: MEDIUM
          readOnly: true
          type: string
        desired_size:
          description: virtual instance desired size
          enum:
          - FREE
          - SHARED
          - SMALL
          - MEDIUM
          - LARGE
          - XLARGE
          - XLARGE2
          - XLARGE4
          - XLARGE8
          - XLARGE16
          example: MEDIUM
          readOnly: true
          type: string
        last_updated:
          description: ISO-8601 date of when virtual instance size was last updated
          example: 2001-08-28T00:23:41Z
          type: string
        estimated_switch_duration_minutes:
          description: estimated duration in minutes of last virtual instance size
            update
          example: 20
          format: int64
          type: integer
        monitoring_enabled:
          type: boolean
        default_pod_count:
          format: int32
          type: integer
        scaled_pod_count:
          format: int32
          type: integer
        id:
          description: unique identifier for virtual instance
          example: 123e4567-e89b-12d3-a456-556642440000
          type: string
      type: object
    Workspace:
      description: Workspaces are organizational containers for collections.
      example:
        name: event_logs
        created_at: 2001-08-28T00:23:41Z
        description: Datasets of system logs for the ops team.
        collection_count: 3
        created_by: hello@rockset.com
      properties:
        created_at:
          description: ISO-8601 date of when workspace was created
          example: 2001-08-28T00:23:41Z
          type: string
        created_by:
          description: email of user who created the workspace
          example: hello@rockset.com
          type: string
        name:
          description: descriptive label and unique identifier
          example: event_logs
          type: string
        description:
          description: longer explanation for the workspace
          example: Datasets of system logs for the ops team.
          type: string
        collection_count:
          description: number of collections that are immediate children of workspace
          example: 3
          format: int64
          type: integer
      type: object
    XmlParams:
      example:
        attribute_prefix: _attr
        doc_tag: row
        encoding: UTF-8
        value_tag: value
        root_tag: root
      properties:
        root_tag:
          description: tag until which xml is ignored
          example: root
          type: string
        encoding:
          description: encoding in which data source is encoded
          example: UTF-8
          type: string
        doc_tag:
          description: tags with which documents are identified
          example: row
          type: string
        value_tag:
          description: tag used for the value when there are attributes in the element
            having no child
          example: value
          type: string
        attribute_prefix:
          description: tag to differentiate between attributes and elements
          example: _attr
          type: string
      type: object
x-original-swagger-version: "2.0"
