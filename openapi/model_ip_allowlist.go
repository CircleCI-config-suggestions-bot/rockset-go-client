/*
 * REST API
 *
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IpAllowlist struct for IpAllowlist
type IpAllowlist struct {
	// IP Allowlist policy name
	Name string `json:"name"`
	// optional description
	Description *string `json:"description,omitempty"`
	// email of the creator
	CreatorEmail *string `json:"creator_email,omitempty"`
	// individual IP address or range of IP addresses in CIDR notation
	IpAddress string `json:"ip_address"`
	// ISO-8601 date
	CreatedAt *string `json:"created_at,omitempty"`
}

// NewIpAllowlist instantiates a new IpAllowlist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpAllowlist(name string, ipAddress string) *IpAllowlist {
	this := IpAllowlist{}
	this.Name = name
	this.IpAddress = ipAddress
	return &this
}

// NewIpAllowlistWithDefaults instantiates a new IpAllowlist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpAllowlistWithDefaults() *IpAllowlist {
	this := IpAllowlist{}
	return &this
}

// GetName returns the Name field value
func (o *IpAllowlist) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IpAllowlist) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IpAllowlist) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IpAllowlist) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAllowlist) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IpAllowlist) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IpAllowlist) SetDescription(v string) {
	o.Description = &v
}

// GetCreatorEmail returns the CreatorEmail field value if set, zero value otherwise.
func (o *IpAllowlist) GetCreatorEmail() string {
	if o == nil || o.CreatorEmail == nil {
		var ret string
		return ret
	}
	return *o.CreatorEmail
}

// GetCreatorEmailOk returns a tuple with the CreatorEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAllowlist) GetCreatorEmailOk() (*string, bool) {
	if o == nil || o.CreatorEmail == nil {
		return nil, false
	}
	return o.CreatorEmail, true
}

// HasCreatorEmail returns a boolean if a field has been set.
func (o *IpAllowlist) HasCreatorEmail() bool {
	if o != nil && o.CreatorEmail != nil {
		return true
	}

	return false
}

// SetCreatorEmail gets a reference to the given string and assigns it to the CreatorEmail field.
func (o *IpAllowlist) SetCreatorEmail(v string) {
	o.CreatorEmail = &v
}

// GetIpAddress returns the IpAddress field value
func (o *IpAllowlist) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *IpAllowlist) GetIpAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *IpAllowlist) SetIpAddress(v string) {
	o.IpAddress = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IpAllowlist) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAllowlist) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IpAllowlist) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *IpAllowlist) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

func (o IpAllowlist) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.CreatorEmail != nil {
		toSerialize["creator_email"] = o.CreatorEmail
	}
	if true {
		toSerialize["ip_address"] = o.IpAddress
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableIpAllowlist struct {
	value *IpAllowlist
	isSet bool
}

func (v NullableIpAllowlist) Get() *IpAllowlist {
	return v.value
}

func (v *NullableIpAllowlist) Set(val *IpAllowlist) {
	v.value = val
	v.isSet = true
}

func (v NullableIpAllowlist) IsSet() bool {
	return v.isSet
}

func (v *NullableIpAllowlist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpAllowlist(val *IpAllowlist) *NullableIpAllowlist {
	return &NullableIpAllowlist{value: val, isSet: true}
}

func (v NullableIpAllowlist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpAllowlist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


