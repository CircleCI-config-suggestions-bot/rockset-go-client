/*
 * REST API
 *
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SourceGcs struct for SourceGcs
type SourceGcs struct {
	// name of GCS bucket you want to ingest from
	Bucket *string `json:"bucket,omitempty"`
	// Prefix that selects keys to ingest.
	Prefix *string `json:"prefix,omitempty"`
}

// NewSourceGcs instantiates a new SourceGcs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceGcs() *SourceGcs {
	this := SourceGcs{}
	return &this
}

// NewSourceGcsWithDefaults instantiates a new SourceGcs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceGcsWithDefaults() *SourceGcs {
	this := SourceGcs{}
	return &this
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *SourceGcs) GetBucket() string {
	if o == nil || o.Bucket == nil {
		var ret string
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceGcs) GetBucketOk() (*string, bool) {
	if o == nil || o.Bucket == nil {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *SourceGcs) HasBucket() bool {
	if o != nil && o.Bucket != nil {
		return true
	}

	return false
}

// SetBucket gets a reference to the given string and assigns it to the Bucket field.
func (o *SourceGcs) SetBucket(v string) {
	o.Bucket = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *SourceGcs) GetPrefix() string {
	if o == nil || o.Prefix == nil {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceGcs) GetPrefixOk() (*string, bool) {
	if o == nil || o.Prefix == nil {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *SourceGcs) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *SourceGcs) SetPrefix(v string) {
	o.Prefix = &v
}

func (o SourceGcs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Bucket != nil {
		toSerialize["bucket"] = o.Bucket
	}
	if o.Prefix != nil {
		toSerialize["prefix"] = o.Prefix
	}
	return json.Marshal(toSerialize)
}

type NullableSourceGcs struct {
	value *SourceGcs
	isSet bool
}

func (v NullableSourceGcs) Get() *SourceGcs {
	return v.value
}

func (v *NullableSourceGcs) Set(val *SourceGcs) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceGcs) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceGcs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceGcs(val *SourceGcs) *NullableSourceGcs {
	return &NullableSourceGcs{value: val, isSet: true}
}

func (v NullableSourceGcs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceGcs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


