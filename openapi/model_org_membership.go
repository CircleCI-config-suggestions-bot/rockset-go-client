/*
 * REST API
 *
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OrgMembership struct for OrgMembership
type OrgMembership struct {
	Organization Organization `json:"organization"`
	Roles []string `json:"roles"`
	InviteState string `json:"invite_state"`
	InvitedBy string `json:"invited_by"`
	// email of the user
	Email *string `json:"email,omitempty"`
	// ISO-8601 date
	ExpiresAt string `json:"expires_at"`
	// ISO-8601 date
	CreatedAt string `json:"created_at"`
}

// NewOrgMembership instantiates a new OrgMembership object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgMembership(organization Organization, roles []string, inviteState string, invitedBy string, expiresAt string, createdAt string) *OrgMembership {
	this := OrgMembership{}
	this.Organization = organization
	this.Roles = roles
	this.InviteState = inviteState
	this.InvitedBy = invitedBy
	this.ExpiresAt = expiresAt
	this.CreatedAt = createdAt
	return &this
}

// NewOrgMembershipWithDefaults instantiates a new OrgMembership object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgMembershipWithDefaults() *OrgMembership {
	this := OrgMembership{}
	return &this
}

// GetOrganization returns the Organization field value
func (o *OrgMembership) GetOrganization() Organization {
	if o == nil {
		var ret Organization
		return ret
	}

	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
func (o *OrgMembership) GetOrganizationOk() (*Organization, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Organization, true
}

// SetOrganization sets field value
func (o *OrgMembership) SetOrganization(v Organization) {
	o.Organization = v
}

// GetRoles returns the Roles field value
func (o *OrgMembership) GetRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *OrgMembership) GetRolesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Roles, true
}

// SetRoles sets field value
func (o *OrgMembership) SetRoles(v []string) {
	o.Roles = v
}

// GetInviteState returns the InviteState field value
func (o *OrgMembership) GetInviteState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InviteState
}

// GetInviteStateOk returns a tuple with the InviteState field value
// and a boolean to check if the value has been set.
func (o *OrgMembership) GetInviteStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InviteState, true
}

// SetInviteState sets field value
func (o *OrgMembership) SetInviteState(v string) {
	o.InviteState = v
}

// GetInvitedBy returns the InvitedBy field value
func (o *OrgMembership) GetInvitedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvitedBy
}

// GetInvitedByOk returns a tuple with the InvitedBy field value
// and a boolean to check if the value has been set.
func (o *OrgMembership) GetInvitedByOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InvitedBy, true
}

// SetInvitedBy sets field value
func (o *OrgMembership) SetInvitedBy(v string) {
	o.InvitedBy = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *OrgMembership) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgMembership) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *OrgMembership) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *OrgMembership) SetEmail(v string) {
	o.Email = &v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *OrgMembership) GetExpiresAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *OrgMembership) GetExpiresAtOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *OrgMembership) SetExpiresAt(v string) {
	o.ExpiresAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *OrgMembership) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *OrgMembership) GetCreatedAtOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *OrgMembership) SetCreatedAt(v string) {
	o.CreatedAt = v
}

func (o OrgMembership) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["organization"] = o.Organization
	}
	if true {
		toSerialize["roles"] = o.Roles
	}
	if true {
		toSerialize["invite_state"] = o.InviteState
	}
	if true {
		toSerialize["invited_by"] = o.InvitedBy
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableOrgMembership struct {
	value *OrgMembership
	isSet bool
}

func (v NullableOrgMembership) Get() *OrgMembership {
	return v.value
}

func (v *NullableOrgMembership) Set(val *OrgMembership) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgMembership) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgMembership) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgMembership(val *OrgMembership) *NullableOrgMembership {
	return &NullableOrgMembership{value: val, isSet: true}
}

func (v NullableOrgMembership) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgMembership) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


