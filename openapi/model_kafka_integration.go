/*
 * REST API
 *
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// KafkaIntegration struct for KafkaIntegration
type KafkaIntegration struct {
	// Kafka topics to tail
	KafkaTopicNames []string `json:"kafka_topic_names"`
	// The status of the Kafka source by topic
	SourceStatusByTopic *map[string]StatusKafka `json:"source_status_by_topic,omitempty"`
	// The format of the Kafka topics being tailed
	KafkaDataFormat string `json:"kafka_data_format"`
	// kafka connection string
	ConnectionString *string `json:"connection_string,omitempty"`
}

// NewKafkaIntegration instantiates a new KafkaIntegration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaIntegration(kafkaTopicNames []string, kafkaDataFormat string) *KafkaIntegration {
	this := KafkaIntegration{}
	this.KafkaTopicNames = kafkaTopicNames
	this.KafkaDataFormat = kafkaDataFormat
	return &this
}

// NewKafkaIntegrationWithDefaults instantiates a new KafkaIntegration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaIntegrationWithDefaults() *KafkaIntegration {
	this := KafkaIntegration{}
	return &this
}

// GetKafkaTopicNames returns the KafkaTopicNames field value
func (o *KafkaIntegration) GetKafkaTopicNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.KafkaTopicNames
}

// GetKafkaTopicNamesOk returns a tuple with the KafkaTopicNames field value
// and a boolean to check if the value has been set.
func (o *KafkaIntegration) GetKafkaTopicNamesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.KafkaTopicNames, true
}

// SetKafkaTopicNames sets field value
func (o *KafkaIntegration) SetKafkaTopicNames(v []string) {
	o.KafkaTopicNames = v
}

// GetSourceStatusByTopic returns the SourceStatusByTopic field value if set, zero value otherwise.
func (o *KafkaIntegration) GetSourceStatusByTopic() map[string]StatusKafka {
	if o == nil || o.SourceStatusByTopic == nil {
		var ret map[string]StatusKafka
		return ret
	}
	return *o.SourceStatusByTopic
}

// GetSourceStatusByTopicOk returns a tuple with the SourceStatusByTopic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaIntegration) GetSourceStatusByTopicOk() (*map[string]StatusKafka, bool) {
	if o == nil || o.SourceStatusByTopic == nil {
		return nil, false
	}
	return o.SourceStatusByTopic, true
}

// HasSourceStatusByTopic returns a boolean if a field has been set.
func (o *KafkaIntegration) HasSourceStatusByTopic() bool {
	if o != nil && o.SourceStatusByTopic != nil {
		return true
	}

	return false
}

// SetSourceStatusByTopic gets a reference to the given map[string]StatusKafka and assigns it to the SourceStatusByTopic field.
func (o *KafkaIntegration) SetSourceStatusByTopic(v map[string]StatusKafka) {
	o.SourceStatusByTopic = &v
}

// GetKafkaDataFormat returns the KafkaDataFormat field value
func (o *KafkaIntegration) GetKafkaDataFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KafkaDataFormat
}

// GetKafkaDataFormatOk returns a tuple with the KafkaDataFormat field value
// and a boolean to check if the value has been set.
func (o *KafkaIntegration) GetKafkaDataFormatOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.KafkaDataFormat, true
}

// SetKafkaDataFormat sets field value
func (o *KafkaIntegration) SetKafkaDataFormat(v string) {
	o.KafkaDataFormat = v
}

// GetConnectionString returns the ConnectionString field value if set, zero value otherwise.
func (o *KafkaIntegration) GetConnectionString() string {
	if o == nil || o.ConnectionString == nil {
		var ret string
		return ret
	}
	return *o.ConnectionString
}

// GetConnectionStringOk returns a tuple with the ConnectionString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaIntegration) GetConnectionStringOk() (*string, bool) {
	if o == nil || o.ConnectionString == nil {
		return nil, false
	}
	return o.ConnectionString, true
}

// HasConnectionString returns a boolean if a field has been set.
func (o *KafkaIntegration) HasConnectionString() bool {
	if o != nil && o.ConnectionString != nil {
		return true
	}

	return false
}

// SetConnectionString gets a reference to the given string and assigns it to the ConnectionString field.
func (o *KafkaIntegration) SetConnectionString(v string) {
	o.ConnectionString = &v
}

func (o KafkaIntegration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kafka_topic_names"] = o.KafkaTopicNames
	}
	if o.SourceStatusByTopic != nil {
		toSerialize["source_status_by_topic"] = o.SourceStatusByTopic
	}
	if true {
		toSerialize["kafka_data_format"] = o.KafkaDataFormat
	}
	if o.ConnectionString != nil {
		toSerialize["connection_string"] = o.ConnectionString
	}
	return json.Marshal(toSerialize)
}

type NullableKafkaIntegration struct {
	value *KafkaIntegration
	isSet bool
}

func (v NullableKafkaIntegration) Get() *KafkaIntegration {
	return v.value
}

func (v *NullableKafkaIntegration) Set(val *KafkaIntegration) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaIntegration) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaIntegration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaIntegration(val *KafkaIntegration) *NullableKafkaIntegration {
	return &NullableKafkaIntegration{value: val, isSet: true}
}

func (v NullableKafkaIntegration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaIntegration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


