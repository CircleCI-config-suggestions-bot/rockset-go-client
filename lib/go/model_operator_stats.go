/*
 * REST API
 *
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package rockset

import (
	"bytes"
	"encoding/json"
	"fmt"
)

type OperatorStats struct {
	// The id of the worker this operator ran on
	Worker string `json:"worker,omitempty"`
	// The id of the fragment this operator belonged to
	Fragment int64 `json:"fragment,omitempty"`
	// The id of the task this operator belonged to
	Task string `json:"task,omitempty"`
	// The id of this operator in the task
	OperatorId int64 `json:"operator_id,omitempty"`
	// The class name of this operator
	OperatorName string `json:"operator_name,omitempty"`
	// Microseconds since UNIX epoch of the first time data was received from any of this operator's inputs
	StartTimeUs int64 `json:"start_time_us,omitempty"`
	// Microseconds since UNIX epoch of the last time data was sent to any of this operator's outputs
	EndTimeUs int64 `json:"end_time_us,omitempty"`
	// Maximum memory used by this operator during execution
	MaxMemory int64 `json:"max_memory,omitempty"`
	// Total bytes received across all inputs
	InputBytes int64 `json:"input_bytes,omitempty"`
	// Total rows received across all inputs
	InputRows int64 `json:"input_rows,omitempty"`
	// Total bytes sent across all outputs
	OutputBytes int64 `json:"output_bytes,omitempty"`
	// Total rows sent across all outputs
	OutputRows int64 `json:"output_rows,omitempty"`
}

func (m OperatorStats) PrintResponse() {
	r, err := json.Marshal(m)
	var out bytes.Buffer
	err = json.Indent(&out, []byte(string(r)), "", "    ")
	if err != nil {
		fmt.Println("error parsing string")
		return
	}

	fmt.Println(out.String())
}
